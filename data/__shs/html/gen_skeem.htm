<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<meta http-equiv="x-ua-compatible" content="IE=EmulateIE9" >
    <title>Skeem</title>
    <meta http-equiv="cache-control" content="no-cache">
    <meta http-equiv="pragma" content="no-cache">
    <!--<meta http-equiv="refresh" content="10">-->
    <meta name="copyright" content="Eesti Keele Instituut, Andres Loopmann">
    <meta name="author" content="Andres Loopmann">
    <meta name="keywords" content="EELex">
    <link rel="stylesheet" type="text/css" href="dhtmlx/dhtmlxTree/codebase/dhtmlxtree.css">
    <script type="text/javascript" src="dhtmlx/dhtmlxTree/codebase/dhtmlxcommon.js"></script>
    <script type="text/javascript" src="dhtmlx/dhtmlxTree/codebase/dhtmlxtree.js"></script>
    <!--<script src="dhtmlx/dhtmlxTree/codebase/ext/dhtmlxtree_json.js"></script>-->
    <link rel="stylesheet" type="text/css" href="dhtmlx/dhtmlxCombo/codebase/dhtmlxcombo.css" />
    <script type="text/javascript" src="dhtmlx/dhtmlxCombo/codebase/dhtmlxcombo.js"></script>
    <script type="text/javascript" src="dhtmlx/dhtmlxCombo/codebase/ext/dhtmlxcombo_whp.js"></script>
    <script type="text/javascript" src="dhtmlx/dhtmlxCombo/codebase/ext/dhtmlxcombo_extra.js"></script>
    <link rel="stylesheet" type="text/css" href="../css/script.css">
    <script type="text/javascript" src="res_xml.js"></script>
    <script type="text/javascript" src="tools.js"></script>
    <script type="text/javascript" src="lisad.js"></script>
    <script type="text/javascript">

        var dic_desc, appLang, usrName, DICPR, DICURI, rootLang, default_query;
        var tree;
        var xsdDOM, xmlNsM, schRootElems, nsList;
        var treeNodeId;

        var atribuudid = new Array();
        var elemendid = new Array();

        var openmenuid = '';
        var keeled;
        var impSchemaLocations = new Array();
        var tyybid = new Array();

        // tehniline: neid kindlasti toimetamisalal ei näidata
        var elemNoShow = ";pa;p;G;K;KA;KL;T;TA;TL;PT;PTA;X;XA;";
        var attrNoShow = ";KF;O;";
        //var tehniline = 'font-family:"Cambria";';
        var tehniline = 'color:silver;';

        var lisatud = 'color:blue;';
        var muudetud = 'font-weight:bold;';
        var xsAny = 'color:red;';

        var treeXmlDom;
        var attrImage = 'xyz'; //'struprop_16-16.ico'

        var restorePoints = new Array();
        var redoPoints = new Array();

        var srchForDests = null;
        var srchForIndex = -2;
        var lastSrchForName = '-';

        var xsl2ConfDom, xsl2ConfRoot, xslIndented;
        var displayedElem, displayedItemId;

        var z_sel_Font, z_sel_FontSize, z_sel_Color, z_sel_BgColor;


        var tyybidSalvestatud = false;
        var skeemSalvestatud = false;

        var PD = "\uE001";

        //        function attDestrEvnt(o) {
        //            o.attachEvent("onChange", function(o) { o.destructor()});
        //        }


        //'-----------------------------------------------------------------------------------
        function getStrCharset(intCharset) {
            var charset = "--------------------";
            switch (intCharset) {
                case 0:
                    charset = "ANSI";
                    break;
                case 1:
                    charset = "System default";
                    break;
                case 2:
                    charset = "Standard symbols";
                    break;
                case 77:
                    charset = "Apple Macintosh®";
                    break;
                case 128:
                    charset = "Japanese (Shift-JIS)";
                    break;
                case 129:
                    charset = "Korean (Wansung)";
                    break;
                case 130:
                    charset = "Korean (Johab)";
                    break;
                case 134:
                    charset = "Simplified Chinese";
                    break;
                case 136:
                    charset = "Traditional Chinese";
                    break;
                case 161:
                    charset = "Greek";
                    break;
                case 162:
                    charset = "Turkish";
                    break;
                case 163:
                    charset = "Vietnamese";
                    break;
                case 177:
                    charset = "Hebrew";
                    break;
                case 178:
                    charset = "Arabic";
                    break;
                case 186:
                    charset = "Baltic";
                    break;
                case 204:
                    charset = "Russian";
                    break;
                case 222:
                    charset = "Thai";
                    break;
                case 238:
                    charset = "Eastern European";
                    break;
                case 255:
                    charset = "OEM";
                    break;
            }
            return charset;
        }


        //'-----------------------------------------------------------------------------------
        function fillFonts() {
            var fontsArray = new Array();
            var i;
            for (i = 1; i <= dlgHelper.fonts.count; i++) {
                fontsArray.push(dlgHelper.fonts(i));
            }
            fontsArray.sort();

            var xmlStr = "<complete>";
            for (i = 0; i < fontsArray.length; i++) {
                // var intCharset = dlgHelper.getCharset(fontsArray[i]);
                // getStrCharset(intCharset)
                xmlStr += "<option value='" + fontsArray[i] + "'>" + fontsArray[i] + "</option>";
            }
            xmlStr += "</complete>";
            return xmlStr;
        }


        //'-----------------------------------------------------------------------------------
        function bodyOnKeyUp() {
            switch (window.event.keyCode) {
                case 27:
                    window.close();
                    break;
                case 13:
                    if (window.event.srcElement.id == "inpCurrTag") {
                        btnNextTag.focus();
                        btnNextTag.click();
                    }
                    break;
            }
            return;
        } // bodyOnKeyUp


        //'-----------------------------------------------------------------------------------
        function updateTreeXmlDom() {
            treeXmlDom = IDD("String", '<tree id="0" />', false, false, null);

            // <sr> id == 1
            updateTreeXmlDomNodes(1, treeXmlDom.documentElement);

            return;
        } // updateTreeXmlDom


        //'-----------------------------------------------------------------------------------
        function updateTreeXmlDomNodes(id, treeXmlNode) {
            var text = tree.getItemText(id);
            var userData = tree.getUserData(id, 'tag'); // 'a' v 'e' | qn | style
            var udData = userData.split('|');

            var itmNode = treeXmlNode.appendChild(treeXmlDom.createNode(NODE_ELEMENT, "item", ""));
            itmNode.setAttribute("id", id);
            itmNode.setAttribute("text", text);
            if (udData[0] == 'a')
                itmNode.setAttribute("im0", attrImage);

            // 1 on enabletud ja checked; 3 on disabletud ja mitte-checked; 0 on enabletud ja mitte-checked
            //checked - check checkbox if exists (in case of 3-state checkboxes values can be 1 - checked or -1 - unsure);
            var tsekatud = tree.isItemChecked(id);
            itmNode.setAttribute("checked", tsekatud);

            var udNode = itmNode.appendChild(treeXmlDom.createNode(NODE_ELEMENT, "userdata", ""));
            udNode.setAttribute("name", 'tag');
            udNode.text = userData;

            var idd = tree.getSubItems(id).toString();
            if (idd.length > 0) {
                var subItems = idd.split(',');
                for (var i in subItems) {
                    updateTreeXmlDomNodes(subItems[i], itmNode);
                }
            }
        } // updateTreeXmlDomNodes


        //'-----------------------------------------------------------------------------------
        function bodyOnLoad() {
            var inArr = window.dialogArguments;
            dic_desc = inArr[0];
            usrName = inArr[1];
            appLang = inArr[2];
            keeled = { "et": 0, "en": 1, "ru": 2 };

            var shsconfig, cfgElem;
            shsconfig = IDD("File", "../shsconfig_" + dic_desc + ".xml", false, false, null);
            if (shsconfig.parseError.errorCode != 0) {
                alert("Puudub 'shsconfig_" + dic_desc + ".xml'!");
                return;
            }

            dhx_globalImgPath = "dhtmlx/dhtmlxCombo/codebase/imgs/";

            cfgElem = shsconfig.documentElement.selectSingleNode("dicpr");
            if (cfgElem == null) {
                alert("Puudub 'dicpr'!");
                return;
            }
            DICPR = cfgElem.text;

            cfgElem = shsconfig.documentElement.selectSingleNode("dicuri");
            if (cfgElem == null) {
                alert("Puudub 'dicuri'!");
                return;
            }
            DICURI = cfgElem.text;

            cfgElem = shsconfig.documentElement.selectSingleNode("rootLang");
            if (cfgElem == null) {
                alert("Puudub 'rootLang'!");
                return;
            }
            rootLang = cfgElem.text;

            cfgElem = shsconfig.documentElement.selectSingleNode("default_query");
            if (cfgElem == null) {
                alert("Puudub 'default_query'!");
                return;
            }
            default_query = cfgElem.text;

            var XSD_FILE = "../xsd/schema_" + dic_desc + ".xsd";
            xsdDOM = IDD("File", XSD_FILE, false, false, null);
            if (xsdDOM.parseError.errorCode != 0) {
                ShowXMLParseError(xsdDOM);
                return;
            }

            xmlNsM = new ActiveXObject("Msxml2.MXNamespaceManager.6.0");
            xmlNsM.allowOverride = true;
            //            xmlNsM.declarePrefix(NS_XS_PR, NS_XS);
            //            xmlNsM.declarePrefix(DICPR, DICURI);
            nsList = '';
            var nimeRuumid = xsdDOM.documentElement.selectNodes("namespace::*");
            var ix;
            for (ix = 0; ix < nimeRuumid.length; ix++) {
                if (nimeRuumid[ix].prefix != '') {
                    if (nimeRuumid[ix].baseName != 'xml') {
                        xmlNsM.declarePrefix(nimeRuumid[ix].baseName, nimeRuumid[ix].value);
                        nsList += " xmlns:" + nimeRuumid[ix].baseName + "='" + nimeRuumid[ix].value + "'";
                    }
                }
            }
            nsList = nsList.replace("^\s+", "");
            xsdDOM.setProperty("SelectionLanguage", "XPath");
            xsdDOM.setProperty("SelectionNamespaces", nsList);

            var xsdSC = new ActiveXObject("Msxml2.XMLSchemaCache.6.0");
            xsdSC.validateOnLoad = true;
            xsdSC.add(DICURI, XSD_FILE);
            schRootElems = xsdSC.getSchema(DICURI).elements;
            var decl = schRootElems.itemByQName('sr', DICURI);

            //            tyybid["xs:string"] = 8485;
            //            tyybid["xs:unsignedByte"] = 8488;
            //            tyybid["xs:positiveInteger"] = 8482;
            //            tyybid["xs:decimal"] = 8457;
            //            tyybid["xs:dateTime"] = 8455;
            //            tyybid["xs:boolean"] = 8452;
            //            tyybid["xs:language"] = 8469;


            var xsdImports = xsdDOM.documentElement.selectNodes("xs:import");
            for (ix = 0; ix < xsdImports.length; ix++) {
                var xsdImport = xsdImports[ix];
                var uri = xsdImport.getAttribute("namespace");
                var pr = xmlNsM.getPrefixes(uri).item(0);
                var locn = xsdImport.getAttribute("schemaLocation");
                impSchemaLocations[uri] = locn;
            }

            fillTypes();

            selDataType.options[0].selected = true;

            xsl2ConfDom = IDD("", "", false, false, null);
            xsl2ConfDom.preserveWhiteSpace = true;
            xsl2ConfDom.load("../config/xsl2/gendXsl2Conf_" + dic_desc + ".xml");
            if (xsl2ConfDom.parseError.errorCode != 0) {
                var vastus = window.confirm("Siiani on olnud kasutusel 'käsitsi' tehtud toimetamisala. Tuleb alustada nullist.\n\nKas jätkata?")
                if (!vastus) {
                    window.close();
                    return;
                }
                xsl2ConfDom = IDD("", "", false, false, null);
                xsl2ConfDom.preserveWhiteSpace = true;
                xsl2ConfRoot = xsl2ConfDom.appendChild(xsl2ConfDom.createNode(NODE_ELEMENT, "elems", ""));
            }
            else {
                xsl2ConfRoot = xsl2ConfDom.documentElement;
                //'exists, kõik @st atribuudid võetakse maha, skeemi lugemise käigus
                // pannakse iga elemendi v atribuudi külge @st = 'e' ning lõpetuseks kustutatakse kõik elemendid/atribuudid,
                // mille @st <> 'e'
                var ex = xsl2ConfRoot.selectNodes(".//*/@st");
                ex.removeAll();
            }

            xslIndented = IDD("File", "../xsl/tools/indented_copy.xsl", false, false, null)
            if (xslIndented.parseError.errorCode != 0) {
                ShowXMLParseError(xslIndented);
                return;
            }


            tree = new dhtmlXTreeObject("treeBox", "100%", "100%", 0); // HTML id, laius, kõrgus, tree "root id"
            tree.setSkin('dhx_skyblue');
            tree.setImagePath("dhtmlx/dhtmlxTree/codebase/imgs/csh_bluebooks/");
            tree.enableIEImageFix(true); // disabled by default
            tree.enableCheckBoxes(true, false); //mode(true|false), hidden (not rendered)

//            var myHref = window.location.href;
//            myHref = myHref.substr(0, myHref.lastIndexOf('/')); // .../html
//            myHref = myHref.substr(0, myHref.lastIndexOf('/')); // ... __shs või __shs_test
            attrImage = "../../../../../../graphics/struprop_16-16.ico";

            //            tree.enableDragAndDrop(true, false);
            //            tree.setDragBehavior("sibling", true); // Pro - ?
            //            tree.setStdImages("folderClosed.gif", "folderOpen.gif", "folderClosed.gif");

            treeNodeId = 0;
            fillSchChildElems(decl, 1, treeNodeId, "#document");
            cleanUpConf();

            spnSrchInfo.innerText = '-: 0/0';
            spnBufferInfo.innerText = restorePoints.length + '/' + redoPoints.length;

            // seisud salvestatakse peale muudatusi. Et alati oleks treexmldom sisu aktuaalne.
            salvestaSeis();


            tree.attachEvent("onClick", function (id, prevId) {

                setElemLayout();

                var selectId = tree.getSelectedItemId();
                if (window.event.ctrlLeft)
                    tree.disableCheckbox(selectId, false);

                //var selectId = id;
                var text = tree.getItemText(selectId);
                var tagItms = tree.getUserData(id, 'tag').split('|'); // 'a' v 'e' | qn | style
                var itmItems;

                if (tagItms[0] == 'e') {
                    // kirjeldused | type.itemType | contentType | type.name
                    itmItems = elemendid[tagItms[1]].split('|');
                    var korduvus = text.substr(text.indexOf("[") + 1);
                    korduvus = korduvus.substr(0, korduvus.indexOf("]"));
                    var maxOcc = korduvus.substr(korduvus.indexOf(" ") + 1);
                    var minOcc = korduvus.substr(0, korduvus.indexOf(","));
                    inpMinOcc.value = minOcc;
                    inpMaxOcc.value = maxOcc;

                    if (tagItms[1] != 'xs:any') {
                        if (itmItems[2] == '' || itmItems[2] == '1') { // simpleType v textOnly; ka atribuudid võiksid klappida
                            if (hasChildElements(selectId)) {
                                itmItems[1] = SOMITEM_COMPLEXTYPE;
                                itmItems[2] = '2';
                                itmItems[3] = '';
                                alert("Liigiks on 'ainult tekst' aga on olemas alamelemendid. Liik ja tüüp muudetud!");
                            }
                        }
                        else { // 2, 3
                            if (!hasChildElements(selectId)) {
                                itmItems[1] = SOMITEM_DATATYPE_STRING;
                                itmItems[2] = '';
                                itmItems[3] = 'xs:string';
                                alert("Liigiks on '(tekst JA) elemendid' aga alamelemente pole. Liik ja tüüp muudetud!");
                            }
                        }
                    }
                    elemendid[tagItms[1]] = itmItems.join('|');

                }
                else {
                    // kirjeldused | | | type.name
                    itmItems = atribuudid[tagItms[1]].split('|');
                    if (text.indexOf(" [obl] = ") > -1)
                        chkUsed.checked = true;
                    else
                        chkUsed.checked = false;

                    if (tree.hasChildren(selectId)) {
                        alert("Atribuudil on olemas alamad. Alamad kustutatud!");
                        tree.deleteChildItems(selectId);
                    }
                    itmItems[1] = '';
                    itmItems[2] = '';
                    if (itmItems[3] == '') {
                        itmItems[3] = 'xs:string';
                        alert("Atribuudil puudub tüüp! Tüüp lisatud!");
                    }
                    atribuudid[tagItms[1]] = itmItems.join('|');

                }

                inpElemQName.value = tagItms[1];
                spnRada.innerText = selectId + ': ' + getRada(selectId);
                var kirjeldused = itmItems[0].split(';');
                inpDescNameEt.value = kirjeldused[0];
                inpDescNameEn.value = kirjeldused[1];
                inpDescNameRu.value = kirjeldused[2];

                if (itmItems[2] == '')
                    selContentType.options('1').selected = true;
                else
                    selContentType.options(itmItems[2]).selected = true;

                if (itmItems[3] == '')
                    selDataType.options(0).selected = true;
                else
                    selDataType.options(itmItems[3]).selected = true;

                if (itmItems[2] == '2' || itmItems[2] == '3')
                    selDataType.disabled = true;
                else
                    selDataType.disabled = false;

                if (tagItms[0] == 'a')
                    inpCurrTag.value = '@' + tagItms[1];
                else
                    inpCurrTag.value = tagItms[1];

                return;
            });


            var delimwidth = cmenu.style.pixelWidth / 16;
            var delimline = "";
            for (ix = 0; ix < delimwidth; ix++)
                delimline += String.fromCharCode(0x2013); // EN DASH


            tree.attachEvent("onRightClick", function (id, object) {
                tree.selectItem(id, true, false); // id, onSelect func, preserve (eelmine selected)

                //var img = tree.getItemImagex(id, 0, false); // Pro - ?

                var tagItms = tree.getUserData(id, 'tag').split('|');

                if (tagItms[1] == 'xs:any')
                    return;

                var cmhtml = '';
                cmhtml += "<div style='width:100%' class='md' id='pealKiri'></div>";
                cmhtml += "<div style='width:100%' class='dl' id='delim0'>" + delimline + "</div>";
                if (tagItms[0] == 'e') {
                    cmhtml += "<div style='width:100%' class='mi' id='add_before'>Lisa element ette</div>";
                    cmhtml += "<div style='width:100%' class='mi' id='add_child'>Lisa element sisse</div>";
                    cmhtml += "<div style='width:100%' class='mi' id='add_after'>Lisa element järele</div>";
                    cmhtml += "<div style='width:100%' class='mi' id='add_attr'>Lisa atribuut</div>";
                    cmhtml += "<div style='width:100%' class='dl' id='delim1'>" + delimline + "</div>";
                }
                cmhtml += "<div style='width:100%' class='mi' id='del_self'>Kustuta</div>";
                cmenu.innerHTML = cmhtml;

                var elemsHtml = '', qn, nimed;
                elemsHtml += "<div style='width:100%' class='mi' id='al:newElement'>Uus element</div>";
                elemsHtml += "<div style='width:100%' class='dl' id='delim0'>" + delimline + "</div>";
                nimed = new Array();
                for (qn in elemendid) {
                    nimed.push(qn);
                }
                nimed.sort(ciSort);
                var elemItems, kirjeldused, ln;
                for (ix in nimed) {
                    elemItems = elemendid[nimed[ix]].split('|');
                    kirjeldused = elemItems[0].split(';');
                    qn = nimed[ix];
                    ln = qn;
                    if (ln.indexOf(':') > 0)
                        ln = ln.substr(ln.indexOf(':') + 1);
                    if (";sr;A;G;K;KA;KL;T;TA;TL;PT;PTA;X;XA;".indexOf(';' + ln + ';') < 0)
                        elemsHtml += "<div style='width:100%' class='mi' id='" + qn + "'>" +
                        qn + ' = ' + kirjeldused[keeled[appLang]] + "</div>";
                }
                elemNames.innerHTML = elemsHtml;

                elemsHtml = '';
                elemsHtml += "<div style='width:100%' class='mi' id='al:newAttribute'>Uus atribuut</div>";
                elemsHtml += "<div style='width:100%' class='dl' id='delim0'>" + delimline + "</div>";
                nimed = new Array();
                for (qn in atribuudid) {
                    nimed.push(qn);
                }
                nimed.sort(ciSort);
                for (var ix in nimed) {
                    elemItems = atribuudid[nimed[ix]].split('|');
                    kirjeldused = elemItems[0].split(';');
                    qn = nimed[ix];
                    ln = qn;
                    if (ln.indexOf(':') > 0)
                        ln = ln.substr(ln.indexOf(':') + 1);
                    if (";KF;".indexOf(';' + ln + ';') < 0)
                        elemsHtml += "<div style='width:100%' class='mi' id='" + qn + "'>" +
                        qn + ' = ' + kirjeldused[keeled[appLang]] + "</div>";
                }
                attrNames.innerHTML = elemsHtml;

                var mheight = ((cmenu.all.tags("DIV").length) * 16) + 6;
                var srcx = tblGen.offsetLeft + window.event.clientX;
                var srcy;
                if (window.event.clientY + mheight > document.body.clientHeight)
                    srcy = window.event.clientY - mheight;
                else
                    srcy = window.event.clientY;
                DisplayCMenu(srcx, srcy);
                return;
            });


            tree.attachEvent("onCheck", function (id, state) {
                //id - id of the item that was checked|unchecked;
                //state - current state of the checkbox (1 - item is checked, 0 - item is unchecked);

                tree.selectItem(id, true, false); // id, onSelect func, preserve (eelmine selected)

                return;
            });

            z_sel_Font = dhtmlXComboFromSelect("sel_Font");
            z_sel_Font.loadXMLString(fillFonts());
            //z_sel_Font.setOptionWidth(1*(200));
            z_sel_Font.setOptionHeight(200);
            //'z_sel_Font.enableFilteringMode(true);
            z_sel_Font.DOMelem_input.setAttribute("confProp", "colorsFont/font-family");

            var sizesStr = "<complete>";
            sizesStr = sizesStr + "<option value='xx-small'>xx-small</option>";
            sizesStr = sizesStr + "<option value='x-small'>x-small</option>";
            sizesStr = sizesStr + "<option value='small'>small</option>";
            sizesStr = sizesStr + "<option value='medium'>medium</option>";
            sizesStr = sizesStr + "<option value='large'>large</option>";
            sizesStr = sizesStr + "<option value='x-large'>x-large</option>";
            sizesStr = sizesStr + "<option value='xx-large'>xx-large</option>";
            sizesStr = sizesStr + "</complete>";

            z_sel_FontSize = dhtmlXComboFromSelect("sel_FontSize");
            z_sel_FontSize.loadXMLString(sizesStr);
            z_sel_FontSize.enableOptionAutoHeight(true);
            z_sel_FontSize.DOMelem_input.setAttribute("confProp", "colorsFont/font-size");

            var colorsStr = "<complete>";
            colorsStr = colorsStr + "<option value='black' img_src='../graphics/colors/black.png'>black</option>";
            colorsStr = colorsStr + "<option value='silver' img_src='../graphics/colors/silver.png'>silver</option>";
            colorsStr = colorsStr + "<option value='gray' img_src='../graphics/colors/gray.png'>gray</option>";
            colorsStr = colorsStr + "<option value='white' img_src='../graphics/colors/white.png'>white</option>";
            colorsStr = colorsStr + "<option value='maroon' img_src='../graphics/colors/maroon.png'>maroon</option>";
            colorsStr = colorsStr + "<option value='red' img_src='../graphics/colors/red.png'>red</option>";
            colorsStr = colorsStr + "<option value='purple' img_src='../graphics/colors/purple.png'>purple</option>";
            colorsStr = colorsStr + "<option value='fuchsia' img_src='../graphics/colors/fuchsia.png'>fuchsia</option>";
            colorsStr = colorsStr + "<option value='green' img_src='../graphics/colors/green.png'>green</option>";
            colorsStr = colorsStr + "<option value='lime' img_src='../graphics/colors/lime.png'>lime</option>";
            colorsStr = colorsStr + "<option value='olive' img_src='../graphics/colors/olive.png'>olive</option>";
            colorsStr = colorsStr + "<option value='yellow' img_src='../graphics/colors/yellow.png'>yellow</option>";
            colorsStr = colorsStr + "<option value='navy' img_src='../graphics/colors/navy.png'>navy</option>";
            colorsStr = colorsStr + "<option value='blue' img_src='../graphics/colors/blue.png'>blue</option>";
            colorsStr = colorsStr + "<option value='teal' img_src='../graphics/colors/teal.png'>teal</option>";
            colorsStr = colorsStr + "<option value='aqua' img_src='../graphics/colors/aqua.png'>aqua</option>";
            colorsStr = colorsStr + "</complete>";

            z_sel_Color = dhtmlXComboFromSelect("sel_Color");
            z_sel_Color.loadXMLString(colorsStr);
            //z_sel_Color.enableOptionAutoHeight(true);
            z_sel_Color.setOptionWidth(160);
            z_sel_Color.setOptionHeight(200);
            z_sel_Color.DOMelem_input.setAttribute("confProp", "colorsFont/color");

            z_sel_BgColor = dhtmlXComboFromSelect("sel_BgColor");
            z_sel_BgColor.loadXMLString(colorsStr);
            //z_sel_BgColor.enableOptionAutoHeight(true);
            z_sel_BgColor.setOptionWidth(160);
            z_sel_BgColor.setOptionHeight(200);
            z_sel_BgColor.DOMelem_input.setAttribute("confProp", "colorsFont/background-color");

            window.onunload = setRV;

            return;

        } // bodyOnLoad


        //'-----------------------------------------------------------------------------------
        function fillTypes() {
            tyybid = new Array();

            for (var uri in impSchemaLocations) {
                var pr = xmlNsM.getPrefixes(uri).item(0);
                var locn = impSchemaLocations[uri];

                if (locn != NS_XML) { // kõik imports - id peale XML enda
                    var tyybidDOM = IDD("File", '../xsd/' + locn, false, false, null);
                    tyybidDOM.setProperty("SelectionLanguage", "XPath");
                    tyybidDOM.setProperty("SelectionNamespaces", nsList);
                    var tyybidList = tyybidDOM.documentElement.selectNodes("xs:simpleType");
                    for (var ix2 = 0; ix2 < tyybidList.length; ix2++) {
                        var tyyp = tyybidList[ix2];
                        var nimi = tyyp.getAttribute("name");
                        //                        tyybid[pr + ':' + nimi] = 0; // SOMITEM_SIMPLETYPE = 8704
                        tyybid.push(pr + ':' + nimi);
                    }
                }
            }

            tyybid.unshift("xs:string", "xs:unsignedByte", "xs:positiveInteger", "xs:decimal", "xs:dateTime", "xs:boolean", "xs:language");
            tyybid.sort(ciSort);

            while (selDataType.options.length > 0) {
                selDataType.options.remove(0);
            }

            var opt = document.createElement("OPTION");
            selDataType.options.add(opt);
            opt.id = '';
            opt.innerText = '';
            for (var i in tyybid) {
                opt = document.createElement("OPTION");
                selDataType.options.add(opt);
                opt.id = tyybid[i];
                opt.innerText = tyybid[i];
            }
        } // fillTypes


        //'-----------------------------------------------------------------------------------
        function setRV() {
            if (tyybidSalvestatud || skeemSalvestatud)
                window.returnValue = "salvestatud";
        }


        //'-----------------------------------------------------------------------------------
        function setItmData() {
            var selectId = displayedItemId;
            if (selectId == '')
                return;

            var childCount = tree.hasChildren(selectId);

            var newCt = selContentType.options(selContentType.selectedIndex).id;
            var newTypeName = selDataType.options(selDataType.selectedIndex).id;

            var userData = tree.getUserData(selectId, 'tag'); // a või e | qn | style
            var udItms = userData.split('|');

            var itmItms;
            if (udItms[0] == 'a') {
                itmItms = atribuudid[udItms[1]].split('|');
            }
            else
                itmItms = elemendid[udItms[1]].split('|');

            var newIt = '';
            if (childCount) {
                newIt = SOMITEM_COMPLEXTYPE;
            }
            else {
                switch (newTypeName) {
                    case 'xs:string':
                        newIt = SOMITEM_DATATYPE_STRING;
                        break;
                    case 'xs:unsignedByte':
                        newIt = SOMITEM_DATATYPE_UNSIGNEDBYTE;
                        break;
                    case 'xs:positiveInteger':
                        newIt = SOMITEM_DATATYPE_POSITIVEINTEGER;
                        break;
                    case 'xs:decimal':
                        newIt = SOMITEM_DATATYPE_DECIMAL;
                        break;
                    case 'xs:dateTime':
                        newIt = SOMITEM_DATATYPE_DATETIME;
                        break;
                    case 'xs:boolean':
                        newIt = SOMITEM_DATATYPE_BOOLEAN;
                        break;
                    case 'xs:language':
                        newIt = SOMITEM_DATATYPE_LANGUAGE;
                        break;
                    //case 'xs:any':    
                    //    newIt = SOMITEM_COMPLEXTYPE;    
                    //    break;    
                    case '':
                        if (udItms[1] == 'xs:any') {
                            newIt = SOMITEM_COMPLEXTYPE;
                        }
                        else {
                            alert("Puudub andmetüüp!");
                            return;
                        }
                        break;
                    default:
                        newIt = SOMITEM_SIMPLETYPE;
                        break;
                }
                if (udItms[0] == 'a') {
                    newIt = ''; // sest atribuudil puudub itemType
                }
            }

            var etDesc, enDesc, ruDesc;
            etDesc = puhastaNimetus(inpDescNameEt.value);
            inpDescNameEt.value = etDesc;
            enDesc = puhastaNimetus(inpDescNameEn.value);
            inpDescNameEn.value = enDesc;
            ruDesc = puhastaNimetus(inpDescNameRu.value);
            inpDescNameRu.value = ruDesc;
            if (etDesc.length == 0 || enDesc.length == 0) {
                alert("Eesti- ja inglisekeelsed väärtused on kohustuslikud!");
                return;
            }

            var muutus = false;
            var kirjeldused = itmItms[0].split(';');
            if (kirjeldused[0] != etDesc || kirjeldused[1] != enDesc || kirjeldused[2] != ruDesc)
                muutus = true;

            if (itmItms[2] != newCt) { // contentType
                if (udItms[0] == 'a') {
                    newCt = ''; // on 'ainult tekst' ja vastavalt '1': -> '', sest atribuudil ct puudub
                }
                else {
                    if (!childCount) {
                        newCt = ''; // on 'ainult tekst' ja vastavalt '1': -> '', sest pole ei atribuute ega elemente
                    }
                }
            }

            if (itmItms[1] != newIt || itmItms[2] != newCt || itmItms[3] != newTypeName) {
                muutus = true;
            }

            var itmData = etDesc + ';' + enDesc + ';' + ruDesc + '|' + newIt + '|' + newCt + '|' + newTypeName;

            kirjeldused = new Array(etDesc, enDesc, ruDesc);
            var text = tree.getItemText(selectId);
            var newText;
            if (udItms[0] == 'a') {
                newText = '@' + udItms[1];
                var useRequired = false;
                if (text.indexOf(' [obl] = ') > -1)
                    useRequired = true;
                if (useRequired != chkUsed.checked)
                    muutus = true;
                if (chkUsed.checked)
                    newText += ' [obl]';
                newText += ' = ' + kirjeldused[keeled[appLang]];
            }
            else {
                var korduvus = text.substr(text.indexOf("[") + 1);
                korduvus = korduvus.substr(0, korduvus.indexOf("]"));
                var maxOcc = korduvus.substr(korduvus.indexOf(" ") + 1);
                var minOcc = korduvus.substr(0, korduvus.indexOf(","));
                var newMinOcc = parseInt(inpMinOcc.value);
                var newMaxOcc = parseInt(inpMaxOcc.value);
                if (isNaN(newMinOcc) || isNaN(newMaxOcc)) {
                    alert("Kontrolli min ja max väärtusi!");
                    return;
                }
                if (minOcc != newMinOcc || maxOcc != newMaxOcc)
                    muutus = true;
                newText = '[' + newMinOcc + ', ' + newMaxOcc + '] - &lt;' + udItms[1] + '&gt; = ' + kirjeldused[keeled[appLang]];
            }

            if (muutus) {
                tree.setItemText(selectId, newText);
                if (udItms[0] == 'a')
                    atribuudid[udItms[1]] = itmData;
                else
                    elemendid[udItms[1]] = itmData;
                if (udItms[2].indexOf(muudetud) < 0)
                    udItms[2] += muudetud;
                tree.setUserData(selectId, 'tag', udItms.join('|'));
                tree.setItemStyle(selectId, udItms[2]);
                // Nii, nüüd on vaja vanemagrupp igal pool ühesuguseks teha ...

                var parentId = tree.getParentId(selectId);
                var parentData = tree.getUserData(parentId, 'tag').split('|'); // a või e | qn | style
                if (parentData[1] != 'xs:any')
                    equalGroups(parentId);

                salvestaSeis();
            }

            return;

        } // setItmData


        //'-----------------------------------------------------------------------------------
        function puhastaNimetus(s) {
            var t = s;
            t = t.replace(/;/, ''); // 'elemendid' massiivis on kirjeldavad eraldatud ';* - ga
            t = t.replace(/(^\s+|\s+$)/, '');
            t = t.replace(/(^\-+|\-+$)/, ''); // et ainult '-' - st ei piisa ...
            t = t.replace(/(^\s+|\s+$)/, '');
            t = t.replace(/\s+/, ' ');
            return t;
        } // puhastaNimetus


        //'-----------------------------------------------------------------------------------
        function getRada(id) {
            var r = '';
            var currId = id;
            do {
                var udItms = tree.getUserData(currId, 'tag').split('|'); // a või e | qn | style
                if (r.length > 0)
                    r = ' /' + r;
                r = udItms[1] + r;
                if (udItms[0] == 'a')
                    r = '@' + r;
                currId = tree.getParentId(currId);
            } while (currId > 0); // <sr> id == 1
            return r;
        } // getRada


        //'-----------------------------------------------------------------------------------
        function fillSchChildElems(schElem, depth, parentId, parentQn) {

            var qn, pr;
            if (schElem.itemType == SOMITEM_ANY) // tühjad: 'name', 'namespaceURI'; puudub: 'type'
                qn = 'xs:any';
            else {
                qn = schElem.name;
                pr = xmlNsM.getPrefixes(schElem.namespaceURI).item(0);
                if (pr.length > 0)
                    qn = pr + ':' + qn;
            }

            var currentId, treeItemText, itmStyle, elemItems;

            var dokPathEt = ".//xs:element[@name = '" + schElem.name + "']/xs:annotation/xs:documentation[@xml:lang = 'et']";
            var dokPathEn = ".//xs:element[@name = '" + schElem.name + "']/xs:annotation/xs:documentation[@xml:lang = 'en']";
            var dokPathRu = ".//xs:element[@name = '" + schElem.name + "']/xs:annotation/xs:documentation[@xml:lang = 'ru']";
            var kirjeldavEt = qn;
            var kirjeldavEn = qn;
            var kirjeldavRu = qn;
            var doku = xsdDOM.documentElement.selectSingleNode(dokPathEt);
            if (doku != null)
                kirjeldavEt = puhastaNimetus(doku.text);
            doku = xsdDOM.documentElement.selectSingleNode(dokPathEn);
            if (doku != null)
                kirjeldavEn = puhastaNimetus(doku.text);
            doku = xsdDOM.documentElement.selectSingleNode(dokPathRu);
            if (doku != null)
                kirjeldavRu = puhastaNimetus(doku.text);

            var kirjeldused = new Array(kirjeldavEt, kirjeldavEn, kirjeldavRu);
            elemItems = kirjeldused.join(';');

            var tekst, korduvus, minOcc, maxOcc;
            if (parentQn == 'xs:any') {
                tekst = tree.getItemText(parentId);
                korduvus = tekst.substr(tekst.indexOf("[") + 1);
                korduvus = korduvus.substr(0, korduvus.indexOf("]"));
                maxOcc = korduvus.substr(korduvus.indexOf(" ") + 1);
                minOcc = korduvus.substr(0, korduvus.indexOf(","));
            }
            else {
                maxOcc = schElem.maxOccurs;
                minOcc = schElem.minOccurs;
            }

            treeNodeId++;
            currentId = treeNodeId;
            treeItemText = '[' + minOcc + ', ' + maxOcc + '] - &lt;' + qn + '&gt; = ' + kirjeldused[keeled[appLang]];

            // <sr> id = 1
            tree.insertNewChild(parentId, currentId, treeItemText, 0, 0, 0, 0);

            var parentLn, parentPr, parentUri, parentElem;

            // SOMITEM_COMPLEXTYPE = 9216
            // SOMITEM_SIMPLETYPE = 8704 ("type" on mitte 'xs:' prefiksiga)
            // SOMITEM_DATATYPE_STRING = 8485 (xs:string)
            // SOMITEM_DATATYPE_DATETIME = 8455 (xs:dateTime)
            // ...
            if (qn == 'xs:any') { // 'type' puudub
                parentLn = parentQn.substr(parentQn.indexOf(":") + 1);
                parentPr = parentQn.substr(0, parentQn.indexOf(":"));
                parentUri = xmlNsM.getURI(parentPr);
                parentElem = schRootElems.itemByQName(parentLn, parentUri);
                elemItems += '|' + parentElem.type.itemType;
            }
            else {
                elemItems += '|' + schElem.type.itemType;
            }

            var parentQnQn = parentQn + "/" + qn;
            var thisElem = xsl2ConfRoot.selectSingleNode("elem[@name = '" + parentQnQn + "']")
            if (!thisElem) {
                thisElem = xsl2ConfRoot.appendChild(xsl2ConfDom.createNode(NODE_ELEMENT, "elem", ""));
                thisElem.setAttribute("name", parentQnQn);
            }

            // toimetamisalas mitte nähtavad ja muudetavad
            itmStyle = '';
            if (elemNoShow.indexOf(';' + schElem.name + ';') > -1) {
                itmStyle = tehniline;
                tree.setItemStyle(currentId, itmStyle);
                tree.disableCheckbox(currentId, true);
            }
            if (qn == 'xs:any') {
                itmStyle = xsAny;
                tree.setItemStyle(currentId, itmStyle);
            }
            //if (parentQn == 'xs:any') {
            //    itmStyle = "background-color:seashell;";
            //    tree.setItemStyle(currentId, itmStyle);
            //}
            var udData = 'e|' + qn + '|' + itmStyle;
            tree.setUserData(currentId, 'tag', udData);

            var tyypObj, chElem;

            if (schElem.itemType == SOMITEM_ANY) {
                var oAnyDom = IDD("file", "../xml/" + dic_desc + "/aa_" + unName(parentQn) + ".xml", false, false, null);
                if (oAnyDom.parseError.errorCode == 0) {
                    var aAnyNames = oAnyDom.documentElement.text.split("|");
                    for (var key in aAnyNames) {
                        var chQn = aAnyNames[key];
                        var chLn = chQn.substr(chQn.indexOf(":") + 1);
                        var chPr = chQn.substr(0, chQn.indexOf(":"));
                        var chUri = xmlNsM.getURI(chPr);
                        chElem = schRootElems.itemByQName(chLn, chUri);
                        if (!(chElem.name == schElem.name && chElem.namespaceUri == schElem.namespaceUri)) {
                            fillSchChildElems(chElem, depth++, currentId, qn);
                        }
                    }
                }
                // contentType | type.name
                elemItems += '|' + parentElem.type.contentType + '|';

            } else if (schElem.itemType == SOMITEM_ELEMENT) {
                if (schElem.type.itemType == SOMITEM_COMPLEXTYPE) {
                    var ea = new Enumerator(schElem.type.attributes);
                    ea.moveFirst();
                    while (ea.atEnd() == false) {
                        var attr = ea.item();
                        var attrUri = attr.namespaceURI;
                        var attrQn;
                        if (attrUri != '')
                            attrQn = xmlNsM.getPrefixes(attrUri).item(0) + ":" + attr.name;
                        else
                            attrQn = attr.name;
                        dokPathEt = ".//xs:attribute[@name = '" + attr.name + "']/xs:annotation/xs:documentation[@xml:lang = 'et']";
                        dokPathEn = ".//xs:attribute[@name = '" + attr.name + "']/xs:annotation/xs:documentation[@xml:lang = 'en']";
                        dokPathRu = ".//xs:attribute[@name = '" + attr.name + "']/xs:annotation/xs:documentation[@xml:lang = 'ru']";
                        kirjeldavEt = attrQn;
                        kirjeldavEn = attrQn;
                        kirjeldavRu = attrQn;
                        doku = xsdDOM.documentElement.selectSingleNode(dokPathEt);
                        if (doku != null)
                            kirjeldavEt = puhastaNimetus(doku.text);
                        doku = xsdDOM.documentElement.selectSingleNode(dokPathEn);
                        if (doku != null)
                            kirjeldavEn = puhastaNimetus(doku.text);
                        doku = xsdDOM.documentElement.selectSingleNode(dokPathRu);
                        if (doku != null)
                            kirjeldavRu = puhastaNimetus(doku.text);
                        kirjeldused = new Array(kirjeldavEt, kirjeldavEn, kirjeldavRu);
                        var attrItems = kirjeldused.join(';');

                        tyypObj = attr.type;
                        pr = xmlNsM.getPrefixes(tyypObj.namespaceURI).item(0);
                        // "type.itemType | contentType | type.name"
                        attrItems += '|||' + pr + ':' + tyypObj.name;
                        if (atribuudid[attrQn] == null)
                            atribuudid[attrQn] = attrItems;

                        treeItemText = "@" + attrQn;
                        if (attr.use == SCHEMAUSE_REQUIRED)
                            treeItemText += " [obl]";

                        treeItemText += ' = ' + kirjeldused[keeled[appLang]];
                        treeNodeId++;
                        tree.insertNewChild(currentId, treeNodeId, treeItemText, 0, attrImage, 0, 0);


                        confItem = thisElem.selectSingleNode("attrs");
                        if (!confItem)
                            confItem = addConfItem(thisElem, qn, schElem.name, schElem.minOccurs, schElem.maxOccurs, "attrs", "", false);

                        var thisAttr = confItem.selectSingleNode("attr[@name = '" + attrQn + "']");
                        if (!thisAttr) {
                            thisAttr = confItem.appendChild(xsl2ConfDom.createNode(NODE_ELEMENT, "attr", ""));
                            thisAttr.setAttribute("name", attrQn);
                        }

                        // toimetamisalas mitte nähtavad ja muudetavad
                        itmStyle = '';
                        if (attrNoShow.indexOf(';' + attr.name + ';') > -1) {
                            itmStyle = tehniline;
                            tree.setItemStyle(treeNodeId, itmStyle);
                            tree.disableCheckbox(treeNodeId, true);
                        }
                        udData = 'a|' + attrQn + '|' + itmStyle;
                        tree.setUserData(treeNodeId, 'tag', udData);

                        tsekkaAtribuut(thisAttr, attr, treeNodeId);
                        thisAttr.setAttribute("st", "e"); //'exists

                        confItem = thisAttr.selectSingleNode("attr_display");
                        var aDisp = confItem.text;
                        if (aDisp == "0") {
                            tree.setCheck(treeNodeId, false);
                        }
                        else {
                            tree.setCheck(treeNodeId, true);
                        }

                        ea.moveNext();

                    } // while
                    if (schElem.type.contentType > SCHEMACONTENTTYPE_TEXTONLY) { // ELEMENTONLY ja MIXED
                        var e = new Enumerator(schElem.type.contentModel.particles);
                        e.moveFirst();
                        while (e.atEnd() == false) {
                            chElem = e.item();
                            if (!(chElem.name == schElem.name && chElem.namespaceUri == schElem.namespaceUri)) {
                                fillSchChildElems(chElem, depth++, currentId, qn);
                            }
                            e.moveNext();
                        }
                    }
                    // SCHEMACONTENTTYPE_EMPTY (0) - ???
                    // SCHEMACONTENTTYPE_TEXTONLY - complexType/simpleContent/extension base/attribute ref
                    // SCHEMACONTENTTYPE_TEXTONLY (1), SCHEMACONTENTTYPE_ELEMENTONLY (2), SCHEMACONTENTTYPE_MIXED (3)
                    elemItems += '|' + schElem.type.contentType;

                    // nt <mg, m> puhul on tühi nii type.name kui ka type.baseTypes (ex_)
                    // <v> korral on type.name == '', baseTypes[0] == 'v_tyyp'; type.contentType == 1 (ex_)
                    // <tvt> korral baseTypes[0] == 'string'
                    if (schElem.type.contentType == 1) {
                        tyypObj = schElem.type.baseTypes[0];
                        pr = xmlNsM.getPrefixes(tyypObj.namespaceURI).item(0);
                        elemItems += '|' + pr + ':' + tyypObj.name;
                    }
                    else
                        elemItems += '|';
                }
                else {
                    // SOMITEM_SIMPLETYPE - "type" on mitte 'xs:' prefiksiga
                    tyypObj = schElem.type;
                    pr = xmlNsM.getPrefixes(tyypObj.namespaceURI).item(0);
                    // contentType | type.name
                    elemItems += '||' + pr + ':' + tyypObj.name;
                }
            }

            // type.itemType | contentType | type.name
            if (elemendid[qn] == null)
                elemendid[qn] = elemItems;

            tsekkaElement(thisElem, schElem, currentId);
            thisElem.setAttribute("st", "e"); //'exists

            var confItem = thisElem.selectSingleNode("display");
            if (confItem.text == "0") {
                tree.setCheck(currentId, false);
            }
            else {
                tree.setCheck(currentId, true);
            }

            return;
        } // fillSchChildElems


        //'-----------------------------------------------------------------------------------
        function tsekkaElement(currElem, ische, id) {
            var qn, ln, pr, minOcc, maxOcc;
            //if (ische) {
            //    ln = ische.name;
            //    qn = ln;
            //    pr = xmlNsM.getPrefixes(ische.namespaceURI).item(0);
            //    if (pr.length > 0)
            //        qn = pr + ':' + qn;

            //    minOcc = ische.minOccurs;
            //    maxOcc = ische.maxOccurs;
            //}
            //else {
            //}

            var uData = tree.getUserData(id, 'tag').split('|'); // a või e | qn | style
            qn = uData[1];
            ln = qn.substr(qn.indexOf(":") + 1);
            var tekst = tree.getItemText(id);
            var korduvus = tekst.substr(tekst.indexOf("[") + 1);
            korduvus = korduvus.substr(0, korduvus.indexOf("]"));
            maxOcc = korduvus.substr(korduvus.indexOf(" ") + 1);
            minOcc = korduvus.substr(0, korduvus.indexOf(","));

            // kirjeldused | type.itemType | contentType | type.name
            var currElItms = elemendid[qn].split('|');
            var initInit = true;
            if (currElItms[2] == 2)
                initInit = false;

            var confItem = currElem.selectSingleNode("display");
            if (!confItem)
                confItem = addConfItem(currElem, qn, ln, minOcc, maxOcc, "display", "", true);

            confItem = currElem.selectSingleNode("global");
            if (!confItem)
                addConfItem(currElem, qn, ln, minOcc, maxOcc, "global", "", true);

            confItem = currElem.selectSingleNode("colorsFont");
            if (!confItem)
                confItem = addConfItem(currElem, qn, ln, minOcc, maxOcc, "colorsFont", "", false);

            var confItemSubItem = confItem.selectSingleNode("font-family");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "font-family", "", true);
            confItemSubItem = confItem.selectSingleNode("font-size");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "font-size", "", true);
            confItemSubItem = confItem.selectSingleNode("color");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "color", "", true);
            confItemSubItem = confItem.selectSingleNode("background-color");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "background-color", "", true);
            confItemSubItem = confItem.selectSingleNode("font-weight_bold");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "font-weight_bold", "", true);
            confItemSubItem = confItem.selectSingleNode("font-style_italic");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "font-style_italic", "", true);
            confItemSubItem = confItem.selectSingleNode("text-decoration_underline");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "text-decoration_underline", "", true);
            confItemSubItem = confItem.selectSingleNode("font-variant_small-caps");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "font-variant_small-caps", "", true);

            confItem = currElem.selectSingleNode("tableProps");
            if (!confItem)
                confItem = addConfItem(currElem, qn, ln, minOcc, maxOcc, "tableProps", "", false);

            confItemSubItem = confItem.selectSingleNode("createButton");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "createButton", "", true, currElItms[2]);
            //            confItemSubItem = confItem.selectSingleNode("addButton");
            //            if (!confItemSubItem)
            //                addConfItem(confItem, qn, ln, minOcc, maxOcc, "addButton", "", true);
            confItemSubItem = confItem.selectSingleNode("major");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "major", "", true);
            confItemSubItem = confItem.selectSingleNode("editable");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "editable", "", true);
            confItemSubItem = confItem.selectSingleNode("init");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "init", "", initInit);

        } // tsekkaElement


        //'-----------------------------------------------------------------------------------
        function tsekkaAtribuut(currElem, ische, id) {
            var qn, ln, pr, minOcc = -2, maxOcc = -2;
            //if (ische) {
            //    ln = ische.name;
            //    qn = ln;
            //    pr = xmlNsM.getPrefixes(ische.namespaceURI).item(0);
            //    if (pr.length > 0)
            //        qn = pr + ':' + qn;
            //}
            //else {
            //}

            var uData = tree.getUserData(id, 'tag').split('|'); // a või e | qn | style
            qn = uData[1];
            ln = qn.substr(qn.indexOf(":") + 1);

            var confItem = currElem.selectSingleNode("attr_display");
            if (!confItem)
                confItem = addConfItem(currElem, qn, ln, minOcc, maxOcc, "attr_display", "", true);

            confItem = currElem.selectSingleNode("attr_colorsFont");
            if (!confItem)
                confItem = addConfItem(currElem, qn, ln, minOcc, maxOcc, "attr_colorsFont", "", false);

            confItemSubItem = confItem.selectSingleNode("attr_font-family");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "attr_font-family", "", true);
            confItemSubItem = confItem.selectSingleNode("attr_font-size");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "attr_font-size", "", true);
            confItemSubItem = confItem.selectSingleNode("attr_color");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "attr_color", "", true);
            confItemSubItem = confItem.selectSingleNode("attr_background-color");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "attr_background-color", "", true);
            confItemSubItem = confItem.selectSingleNode("attr_font-weight_bold");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "attr_font-weight_bold", "", true);
            confItemSubItem = confItem.selectSingleNode("attr_font-style_italic");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "attr_font-style_italic", "", true);
            confItemSubItem = confItem.selectSingleNode("attr_text-decoration_underline");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "attr_text-decoration_underline", "", true);
            confItemSubItem = confItem.selectSingleNode("attr_font-variant_small-caps");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "attr_font-variant_small-caps", "", true);

            confItem = currElem.selectSingleNode("attr_tableProps");
            if (!confItem)
                confItem = addConfItem(currElem, qn, ln, minOcc, maxOcc, "attr_tableProps", "", false);

            confItemSubItem = confItem.selectSingleNode("attr_init");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "attr_init", "", true);
            confItemSubItem = confItem.selectSingleNode("attr_editable");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "attr_editable", "", true);
            confItemSubItem = confItem.selectSingleNode("attr_createButton");
            if (!confItemSubItem)
                addConfItem(confItem, qn, ln, minOcc, maxOcc, "attr_createButton", "", true);


        } // tsekkaAtribuut


        //'-----------------------------------------------------------------------------------
        function addConfItem(obj, qn, ln, minOcc, maxOcc, confItemName, refPath, init, ct) {
            var ref;
            if (refPath)
                ref = obj.selectSingleNode(refPath);
            var newItem = obj.insertBefore(xsl2ConfDom.createNode(NODE_ELEMENT, confItemName, ""), ref)
            newItem.text = "";
            if (init) {
                if (confItemName == "display") {
                    if (elemNoShow.indexOf(";" + ln + ";") > -1)
                        newItem.text = "0";
                    else
                        newItem.text = "1";
                }
                else if (confItemName == "attr_display") {
                    if (attrNoShow.indexOf(";" + ln + ";") > -1)
                        newItem.text = "0";
                    else
                        newItem.text = "1";
                }
                else if (confItemName == "global") {
                    newItem.text = "1";
                }
                else if (confItemName == "font-family") {
                    switch (ln) {
                        case ("m"):
                            newItem.text = "Arial";
                            break;
                        default:
                            break;
                    }
                }
                else if (confItemName == "font-size") {
                    switch (ln) {
                        case ("kaut"):
                            newItem.text = "x-small";
                            break;
                        case ("kaeg"):
                            newItem.text = "x-small";
                            break;
                        default:
                            break;
                    }
                }
                else if (confItemName == "font-weight_bold") {
                    switch (ln) {
                        case "m":
                            newItem.text = "1";
                            break;
                        case ("mvt"):
                            newItem.text = "1";
                            break;
                        case ("tvt"):
                            newItem.text = "1";
                            break;
                        case ("lvt"):
                            newItem.text = "1";
                            break;
                        case "f":
                            newItem.text = "1";
                            break;
                        case "kom":
                            newItem.text = "1";
                            break;
                        default:
                            break;
                    }
                }
                else if (confItemName == "font-style_italic") {
                    switch (ln) {
                        case ("d"):
                            newItem.text = "1";
                            break;
                        case ("nd"):
                            newItem.text = "1";
                            break;
                        default:
                            break;
                    }
                }
                else if (confItemName == "font-variant_small-caps") {
                    switch (ln) {
                        case ("v"):
                            newItem.text = "1";
                            break;
                        case ("s"):
                            newItem.text = "1";
                            break;
                        default:
                            break;
                    }
                }
                else if (confItemName == "color") {
                    switch (ln) {
                        case "m":
                            newItem.text = "maroon";
                            break;
                        case ("mvt"):
                            newItem.text = "darkorange";
                            break;
                        case ("tvt"):
                            newItem.text = "darkorange";
                            break;
                        case ("lvt"):
                            newItem.text = "darkorange";
                            break;
                        case "f":
                            newItem.text = "purple";
                            break;
                        case ("d"):
                            newItem.text = "green";
                            break;
                        case ("nd"):
                            newItem.text = "green";
                            break;
                        case "n":
                            newItem.text = "blue";
                            break;
                        case ("x"):
                            newItem.text = "red";
                            break;
                        case ("qn"):
                            newItem.text = "red";
                            break;
                        case "kom":
                            newItem.text = "blue";
                            break;
                        default: //maxOccurs
                            break;
                    }
                }
                else if (confItemName == "background-color") {
                    switch (ln) {
                        case ("r"):
                            newItem.text = "turquoise";
                            break;
                        default:
                            break;
                    }
                }
                else if (confItemName == "createButton") {
                    if (minOcc == 0 && ct == 2)
                        newItem.text = "1";
                }
                //                else if (confItemName == "addButton") {
                //                    if (maxOcc == -1 || maxOcc > 1)
                //                        newItem.text = "1";
                //                }
                else if (confItemName == "major") {
                    if (minOcc > 0)
                        newItem.text = "1";
                }
                else if (confItemName == "editable") {
                    switch (ln) {
                        case ("kaut"):
                            newItem.text = "0";
                            break;
                        case ("kaeg"):
                            newItem.text = "0";
                            break;
                        default:
                            // ";pa;p;G;K;KA;KL;T;TA;TL;PT;PTA;X;XA;";
                            if (elemNoShow.indexOf(";" + ln + ";") > -1)
                                newItem.text = "0";
                            else
                                newItem.text = "1";
                            break;
                    }
                }
                else if (confItemName == "attr_editable") {
                    switch (ln) {
                        case ("maut"):
                            newItem.text = "0";
                            break;
                        case ("maeg"):
                            newItem.text = "0";
                            break;
                        case ("Gm"):
                            newItem.text = "0";
                            break;
                        case ("g"): // "genereeritud"
                            newItem.text = "0";
                            break;
                        case ("aG"):
                            newItem.text = "0";
                            break;
                        case ("aKF"):
                            newItem.text = "0";
                            break;
                        case ("aK"):
                            newItem.text = "0";
                            break;
                        case ("aKA"):
                            newItem.text = "0";
                            break;
                        case ("aKL"):
                            newItem.text = "0";
                            break;
                        case ("aT"):
                            newItem.text = "0";
                            break;
                        case ("aTA"):
                            newItem.text = "0";
                            break;
                        case ("aTL"):
                            newItem.text = "0";
                            break;
                        default:
                            // ";KF;O;";
                            if (attrNoShow.indexOf(";" + ln + ";") > -1)
                                newItem.text = "0";
                            else
                                newItem.text = "1";
                            break;
                    }
                }
                else if (confItemName == "attr_createButton") { // ehk siis milliste atribuutide korral näeb rombikesi
                    switch (ln) {
                        case ("maut"):
                            newItem.text = "0";
                            break;
                        case ("maeg"):
                            newItem.text = "0";
                            break;
                        case ("Gm"):
                            newItem.text = "0";
                            break;
                        case ("g"): // "genereeritud"
                            newItem.text = "0";
                            break;
                        case ("aG"):
                            newItem.text = "0";
                            break;
                        case ("aKF"):
                            newItem.text = "0";
                            break;
                        case ("aK"):
                            newItem.text = "0";
                            break;
                        case ("aKA"):
                            newItem.text = "0";
                            break;
                        case ("aKL"):
                            newItem.text = "0";
                            break;
                        case ("aT"):
                            newItem.text = "0";
                            break;
                        case ("aTA"):
                            newItem.text = "0";
                            break;
                        case ("aTL"):
                            newItem.text = "0";
                            break;
                        default:
                            if (attrNoShow.indexOf(";" + ln + ";") > -1) // KF, O
                                newItem.text = "0";
                            else
                                newItem.text = "1";
                            break;
                    }
                }
            }
            return newItem;
        } // addConfItem


        //'-----------------------------------------------------------------------------------
        function cleanUpConf() {
            // 'need, mida skeemis polnud, "not existing"
            var notEx = xsl2ConfRoot.selectNodes("elem[not(@st = 'e')]");
            if (notEx.length > 0)
                notEx.removeAll();

            notEx = xsl2ConfRoot.selectNodes("elem/attrs/attr[not(@st = 'e')]");
            if (notEx.length > 0)
                notEx.removeAll();


            // 'vanad värgid maha
            // '05. dets 2010
            //var vanad = xsl2ConfRoot.selectNodes(".//attr_SymbolRoundCond | .//attr_DisplayCond");
            //if (vanad.length > 0)
            //    vanad.removeAll();

        } //'cleanUpConf


        //'-----------------------------------------------------------------------------------
        function sekeldaXsl2Konf() {
            var ex = xsl2ConfRoot.selectNodes(".//*/@st");
            ex.removeAll();

            var sta = loeSkeemiPuu(1); // <sr> id == 1
            cleanUpConf();
        }


        //'-----------------------------------------------------------------------------------
        function loeSkeemiPuu(id) {
            var userData = tree.getUserData(id, 'tag'); // a või e | qn | style
            var udItems = userData.split('|');
            var qn = udItems[1];

            var idd = tree.getSubItems(id).toString();

            var parentQnQn;
            var parentId = tree.getParentId(id);

            if (parentId == 0) { // <sr>
                parentQnQn = "#document/" + qn;
            }
            else {
                var parentTagItms = tree.getUserData(parentId, 'tag').split('|'); // 'a' v 'e' | qn | style
                var parentQn = parentTagItms[1];
                parentQnQn = parentQn + '/' + qn;
            }

            // juurikas on <elems>
            var thisElem = xsl2ConfRoot.selectSingleNode("elem[@name = '" + parentQnQn + "']");
            if (!thisElem) {
                thisElem = xsl2ConfRoot.appendChild(xsl2ConfDom.createNode(NODE_ELEMENT, "elem", ""));
                thisElem.setAttribute("name", parentQnQn);
            }

            tsekkaElement(thisElem, null, id);
            thisElem.setAttribute("st", "e"); //'exists

            var childs, chData, ix, chQn, chLn, sta;

            if (idd.length > 0) {
                childs = idd.split(',');
                for (ix in childs) {
                    chData = tree.getUserData(childs[ix], 'tag').split('|'); // a või e | qn | style
                    chQn = chData[1];
                    chLn = chQn.substr(chQn.indexOf(":") + 1);
                    if (chData[0] == 'a') {

                        var confItem = thisElem.selectSingleNode("attrs");
                        if (!confItem)
                            confItem = addConfItem(thisElem, chQn, chLn, -2, -2, "attrs", "", false);

                        var thisAttr = confItem.selectSingleNode("attr[@name = '" + chQn + "']");
                        if (!thisAttr) {
                            thisAttr = confItem.appendChild(xsl2ConfDom.createNode(NODE_ELEMENT, "attr", ""));
                            thisAttr.setAttribute("name", chQn);
                        }

                        tsekkaAtribuut(thisAttr, null, childs[ix]);
                        thisAttr.setAttribute("st", "e"); //'exists

                    }
                    else {

                        sta = loeSkeemiPuu(childs[ix]);
                        if (sta > 0)
                            return sta;
                    }
                } // for (ix in childs) {
            }

            return 0;
        } // loeSkeemiPuu


        //'-----------------------------------------------------------------------------------
        function teeStruDom() {
            // <sr> id == 1
            var sta = teeStruDomAlamad(1, null, null);

            //if (sta > 0)
            //    alert("Üldstruktuuri kirjutamine: ?");

            return sta;

        } // teeStruDom


        //'-----------------------------------------------------------------------------------
        function teeStruDomAlamad(id, parentQn, struDomNode) {
            var userData = tree.getUserData(id, 'tag');
            var udItems = userData.split('|'); // a või e | qn | style
            var qn = udItems[1];

            var currentDomNode, parentQnQn, thisElem;
            var tekst;

            if (qn == 'xs:any') {
                currentDomNode = struDomNode;
                //qn = parentQn;
            }
            else {
                if (id == "1") { // sõnaraamat <sr>
                    var struDomJuurikas = "<" + qn + " xml:lang='" + rootLang + "' xmlns:" + DICPR + "='" + DICURI + "' xmlns:" + SDPR + "='" + SDURI + "' pr_sd:ver='2.0'></" + qn + ">";
                    struDom = IDD("String", struDomJuurikas, false, false, null);
                    currentDomNode = struDom.documentElement;
                    parentQnQn = "#document/" + qn;
                }
                else {
                    currentDomNode = struDomNode.appendChild(struDom.createNode(NODE_ELEMENT, qn, DICURI));
                    parentQnQn = parentQn + '/' + qn;
                }

                // kirjeldused | type.itemType | contentType | type.name
                //
                // itemType:
                // SOMITEM_COMPLEXTYPE = 9216
                // SOMITEM_SIMPLETYPE = 8704 ("type" on mitte 'xs:' prefiksiga)
                // SOMITEM_DATATYPE_STRING = 8485 (xs:string)
                // SOMITEM_DATATYPE_DATETIME = 8455 (xs:dateTime)
                // SOMITEM_ANY
                // ...
                //
                // contentType:
                // SCHEMACONTENTTYPE_EMPTY (0) - ???
                // SCHEMACONTENTTYPE_TEXTONLY - complexType/simpleContent/extension base/attribute ref
                // SCHEMACONTENTTYPE_TEXTONLY (1), SCHEMACONTENTTYPE_ELEMENTONLY (2), SCHEMACONTENTTYPE_MIXED (3)
                //
                // type.name:
                // xs:string
                // ...

                var currElItems = elemendid[qn].split('|');

                newAttrNode = currentDomNode.attributes.setNamedItem(struDom.createNode(NODE_ATTRIBUTE, "pr_sd:it", SDURI));
                newAttrNode.text = currElItems[1];
                newAttrNode = currentDomNode.attributes.setNamedItem(struDom.createNode(NODE_ATTRIBUTE, "pr_sd:ct", SDURI));
                newAttrNode.text = currElItems[2];
                newAttrNode = currentDomNode.attributes.setNamedItem(struDom.createNode(NODE_ATTRIBUTE, "pr_sd:tn", SDURI));
                newAttrNode.text = currElItems[3];
                newAttrNode = currentDomNode.attributes.setNamedItem(struDom.createNode(NODE_ATTRIBUTE, "pr_sd:nimi", SDURI));
                newAttrNode.text = currElItems[0];

                tekst = tree.getItemText(id);
                var korduvus = tekst.substr(tekst.indexOf("[") + 1);
                korduvus = korduvus.substr(0, korduvus.indexOf("]"));
                var maxOcc = korduvus.substr(korduvus.indexOf(" ") + 1);
                if (maxOcc == '-1')
                    maxOcc = "2000000000";
                var minOcc = korduvus.substr(0, korduvus.indexOf(","));

                newAttrNode = currentDomNode.attributes.setNamedItem(struDom.createNode(NODE_ATTRIBUTE, "pr_sd:minOcc", SDURI));
                newAttrNode.text = minOcc;

                newAttrNode = currentDomNode.attributes.setNamedItem(struDom.createNode(NODE_ATTRIBUTE, "pr_sd:maxOcc", SDURI));
                newAttrNode.text = maxOcc;

                // juurikas on <elems>
                thisElem = xsl2ConfRoot.selectSingleNode("elem[@name = '" + parentQnQn + "']");

                var textVal = thisElem.selectSingleNode("tableProps/init").text;
                if (!textVal)
                    textVal = ' '; // trepitud DOM saamiseks serveris
                currentDomNode.text = textVal;

                textVal = thisElem.selectSingleNode("tableProps/major").text;
                newAttrNode = currentDomNode.attributes.setNamedItem(struDom.createNode(NODE_ATTRIBUTE, "pr_sd:major", SDURI));
                newAttrNode.text = textVal;
            }

            var childs, chData, ix, chQn, chLn, sta;
            var createAttrs = ';', newAttrNode;

            var idd = tree.getSubItems(id).toString();

            if (idd.length > 0) {
                childs = idd.split(',');
                for (ix in childs) {
                    chData = tree.getUserData(childs[ix], 'tag').split('|'); // a või e | qn | style
                    chQn = chData[1];
                    chLn = chQn.substr(chQn.indexOf(":") + 1);
                    tekst = tree.getItemText(childs[ix]);

                    if (chData[0] == 'a') {

                        // kirjeldused;; | type.itemType | contentType | type.name
                        var currAttrItms = atribuudid[chQn].split('|');

                        var thisAttr = thisElem.selectSingleNode("attrs/attr[@name = '" + chQn + "']");

                        if (tekst.indexOf(' [obl] = ') > -1)
                            createAttrs += chQn + ';';

                        if (!(id == 1 && chQn == 'xml:lang')) {
                            newAttrNode = currentDomNode.attributes.setNamedItem(struDom.createNode(NODE_ATTRIBUTE, chQn, DICURI));
                            newAttrNode.text = thisAttr.selectSingleNode("attr_tableProps/attr_init").text;
                            newAttrNode = currentDomNode.attributes.setNamedItem(struDom.createNode(NODE_ATTRIBUTE, "pr_sd:att_" + chQn.replace(":", "_") + "_tn", SDURI));
                            newAttrNode.text = currAttrItms[3];
                        }

                    }
                    else {
                        sta = teeStruDomAlamad(childs[ix], qn, currentDomNode);
                        if (sta > 0)
                            return sta;
                    }
                } // for (ix in childs) {

                if (createAttrs.length > 1) {
                    var createAttrsNode = currentDomNode.attributes.setNamedItem(struDom.createNode(NODE_ATTRIBUTE, "pr_sd:useRequired", SDURI));
                    createAttrsNode.text = createAttrs;
                }
            }

            return 0;
        } // teeStruDomAlamad


        //'-----------------------------------------------------------------------------------
        function DisplayCMenu(posx, posy) {
            cmenu.style.pixelLeft = posx;
            cmenu.style.pixelTop = posy;
            cmenu.style.display = "";
            cmenu.style.cursor = "default";
            cmenu.setCapture();
        } // DisplayCMenu


        //'-----------------------------------------------------------------------------------
        var cmCmd = '';
        function SwitchCMenu() {
            var cmel = window.event.srcElement;
            if (cmel.className == "mi") {
                //	'et vahepeal openmenuid ära ei kaoks
                if (cmel.parentElement.id == "cmenu") {
                    if (openmenuid != "") {
                        //	                    cmenu.setCapture();
                        document.all(openmenuid).style.display = "none";
                        openmenuid = "";
                    }
                }
                cmel.className = "hi";
                if (cmel.parentElement.id == "cmenu") {
                    cmenu.all('pealKiri').innerHTML = cmel.innerHTML;
                    switch (cmel.id) {
                        case 'add_before':
                            cmCmd = "ette";
                            openmenuid = "elemNames";
                            break;
                        case 'add_child':
                            cmCmd = "sisse";
                            openmenuid = "elemNames";
                            break;
                        case 'add_after':
                            cmCmd = "järele";
                            openmenuid = "elemNames";
                            break;
                        case 'add_attr':
                            cmCmd = "lisaAttr";
                            openmenuid = "attrNames";
                            break;
                    }
                    if (openmenuid != "") {
                        if (document.all(openmenuid).innerHTML != "") {
                            document.all(openmenuid).style.pixelLeft = cmenu.style.pixelLeft + cmenu.offsetWidth;
                            if (document.all(openmenuid).all.tags("DIV").length > cmenu.all.tags("DIV").length)
                                document.all(openmenuid).style.pixelTop = document.body.clientHeight / 5;
                            else
                                document.all(openmenuid).style.pixelTop = cmenu.style.pixelTop + cmel.offsetTop;
                            document.all(openmenuid).style.display = "";
                            document.all(openmenuid).setCapture();
                        }
                    }
                }
            }
            else {
                if (cmel.className == "hi") {
                    cmel.className = "mi";
                }
            }
            return;
        } // SwitchCMenu


        //'-----------------------------------------------------------------------------------
        function ClickCMenu() {
            var cmel = window.event.srcElement;

            //'klõps põhimenüüs
            if (cmel.parentElement.id == "cmenu") {
                if (openmenuid == "") {
                    document.releaseCapture();
                    cmenu.style.display = "none";
                }
            }
            else {
                //'klõps alammenüüdes või üldse suvalises kohas
                document.releaseCapture();
                cmenu.style.display = "none";
            }

            var selectId, parentId, uusTekst, itmItems, kirjeldused, qn, udItms, newQn, newLn, currElItms;

            // \w - Equivalent to [A-Za-z0-9_]
            var qnReks = /^[\w]+:[A-Za-z_][\w]*$/;

            // elementide ette/sisse/järele lisamine
            if (cmel.parentElement.id == "elemNames") {
                newQn = cmel.id;
                if (cmel.id == "al:newElement") {
                    // vTextData = object.prompt( [sMessage] [, sDefaultValue])
                    newQn = window.prompt("Sisesta uue elemendi täisnimi (x:mmg, c:p ...)", DICPR + ":");
                    if (!qnReks.test(newQn)) {
                        alert("Nimi ei ole korrektne!");
                        return;
                    }
                    if (elemendid[newQn] != null) {
                        alert("Pole vaja lisada <" + newQn + "> elementi. Juba skeemis olemas!");
                        return;
                    }
                    newLn = newQn.substr(newQn.indexOf(":") + 1);
                    if (elemNoShow.indexOf(';' + newLn + ';') > -1) {
                        alert("<" + newQn + "> on reserveeritud elemendi nimi!");
                        return;
                    }
                }
                selectId = tree.getSelectedItemId();
                udItms = tree.getUserData(selectId, 'tag').split('|'); // a või e | qn | style
                qn = udItms[1];
                parentId = tree.getParentId(selectId);

                if (cmCmd == "ette" || cmCmd == "järele") {
                    // kas antud vanemal on juba äkki see laps olemas?
                    if (existsChildName(parentId, newQn)) {
                        alert("Selles grupis on juba <" + newQn + "> nimeline element!");
                        return;
                    }
                }
                else {
                    if (cmCmd == "sisse") {
                        // kas antud elemendil on juba äkki see laps olemas?
                        if (existsChildName(selectId, newQn)) {
                            alert("Selles grupis on juba <" + newQn + "> nimeline element!");
                            return;
                        }
                    }
                }

                if (elemendid[newQn] == null)
                    elemendid[newQn] = "uus element;new element;noovõi jelement|" + SOMITEM_DATATYPE_STRING + "||xs:string";

                itmItems = elemendid[newQn].split('|');
                kirjeldused = itmItems[0].split(';');
                uusTekst = "[0, 1] - &lt;" + newQn + "&gt; = " + kirjeldused[keeled[appLang]];

                var eqGrpId;
                var fId = getIdFromQName(newQn); // enne lisamist, äkki leiab just lisatud ...
                var currentIndex = tree.getIndexById(selectId);
                // kirjeldused | type.itemType | contentType | type.name
                currElItms = elemendid[qn].split('|');
                treeNodeId++;
                switch (cmCmd) {
                    case 'ette':
                        eqGrpId = parentId;
                        if (currentIndex == 0) {
                            tree.insertNewChild(parentId, treeNodeId, uusTekst, 0, 0, 0, 0, "TOP");
                        }
                        else {
                            var refId = tree.getItemIdByIndex(parentId, currentIndex - 1);
                            tree.insertNewNext(refId, treeNodeId, uusTekst, 0, 0, 0, 0);
                        }
                        break;
                    case 'järele':
                        eqGrpId = parentId;
                        tree.insertNewNext(selectId, treeNodeId, uusTekst, 0, 0, 0, 0);
                        break;
                    case 'sisse':
                        eqGrpId = selectId;
                        // kui ainult tekstile lisatakse uus element, siis contentType po 2 v 3
                        // kirjeldused | type.itemType | contentType | type.name
                        if (currElItms[2] == '' || currElItms[2] == '1') { // simpleType v textOnly
                            currElItms[1] = SOMITEM_COMPLEXTYPE;
                            currElItms[2] = '2';
                            currElItms[3] = '';
                            elemendid[qn] = currElItms.join('|');
                            selContentType.options('2').selected = true;
                            selDataType.options(0).selected = true;

                            if (udItms[2].indexOf(muudetud) < 0)
                                udItms[2] += muudetud;
                            tree.setUserData(selectId, 'tag', udItms.join('|'));
                            tree.setItemStyle(selectId, udItms[2]);
                        }
                        tree.insertNewChild(selectId, treeNodeId, uusTekst, 0, 0, 0, 0);
                        break;
                }
                tree.setUserData(treeNodeId, 'tag', 'e|' + newQn + '|' + lisatud);
                tree.setItemStyle(treeNodeId, lisatud);

                if (fId != -1) {
                    // Nii, nüüd on element ette/sisse/järele lisatud, vaja kopeerida alamelemendid ...
                    copyChilds(fId, treeNodeId, lisatud);
                }
                else { // polnudki skeemis (tree) sellenimelist alles/olemas
                    // itemType
                    itmItems[1] = SOMITEM_DATATYPE_STRING;
                    // contentType
                    itmItems[2] = ''; // contentType: simpleType, xs:string jt
                    // type.name
                    itmItems[3] = 'xs:string';
                    elemendid[cmel.id] = itmItems.join('|');
                }

                // Nii, nüüd on vaja vanemagrupp igal pool ühesuguseks teha ...
                equalGroups(eqGrpId);

                salvestaSeis();

            }

            // atribuutide lisamine
            if (cmel.parentElement.id == "attrNames") {
                selectId = tree.getSelectedItemId();
                udItms = tree.getUserData(selectId, 'tag').split('|'); // a või e | qn | style
                qn = udItms[1];

                newQn = cmel.id;
                if (cmel.id == "al:newAttribute") {
                    // vTextData = object.prompt( [sMessage] [, sDefaultValue])
                    newQn = window.prompt("Sisesta uue atribuudi täisnimi (x:i, c:liik ...)", DICPR + ":");
                    if (!qnReks.test(newQn)) {
                        alert("Nimi ei ole korrektne!");
                        return;
                    }
                    if (atribuudid[newQn] != null) {
                        alert("Pole vaja lisada @" + newQn + " atribuuti. Juba skeemis olemas!");
                        return;
                    }
                    newLn = newQn.substr(newQn.indexOf(":") + 1);
                    if (attrNoShow.indexOf(';' + newLn + ';') > -1) {
                        alert("@" + newQn + " on reserveeritud atribuudi nimi!");
                        return;
                    }
                }

                // kas antud elemendil on juba äkki see laps (atribuut) olemas?
                if (existsChildAttrName(selectId, newQn)) {
                    alert("Sellel elemendil on juba @" + newQn + " nimeline atribuut!");
                    return;
                }

                if (atribuudid[newQn] == null)
                    atribuudid[newQn] = "uus atribuut;new attribute;noovõi atribut|||xs:string";

                var lAttrId = getLastAttrId(selectId);

                itmItems = atribuudid[newQn].split('|');
                kirjeldused = itmItems[0].split(';');
                uusTekst = "@" + newQn + " = " + kirjeldused[keeled[appLang]];
                treeNodeId++;
                if (lAttrId == -1) { // pole ühtegi atribuuti
                    tree.insertNewChild(selectId, treeNodeId, uusTekst, 0, attrImage, 0, 0, "TOP");
                }
                else {
                    tree.insertNewNext(lAttrId, treeNodeId, uusTekst, 0, attrImage, 0, 0);
                }
                tree.setUserData(treeNodeId, 'tag', 'a|' + newQn + '|' + lisatud);
                tree.setItemStyle(treeNodeId, lisatud);

                // kirjeldused | type.itemType | contentType | type.name
                currElItms = elemendid[qn].split('|');

                // kui ainult tekstile lisatakse uus element, siis contentType po 2 v 3
                // kirjeldused | type.itemType | contentType | type.name
                if (currElItms[2] == '') { // simpleType
                    currElItms[1] = SOMITEM_COMPLEXTYPE;
                    currElItms[2] = '1';
                    currElItms[3] = 'xs:string';
                    elemendid[qn] = currElItms.join('|');

                    if (udItms[2].indexOf(muudetud) < 0)
                        udItms[2] += muudetud;
                    tree.setUserData(selectId, 'tag', udItms.join('|'));
                    tree.setItemStyle(selectId, udItms[2]);
                }

                // Nii, nüüd on vaja vanemagrupp igal pool ühesuguseks teha ...
                equalGroups(selectId);

                salvestaSeis();

            }

            // elementide/atribuutide kustutamine
            if (cmel.parentElement.id == "cmenu") {
                if (cmel.id == "del_self") {
                    selectId = tree.getSelectedItemId();
                    parentId = tree.getParentId(selectId);
                    tree.deleteItem(selectId, false); // 2. par - selectParent

                    // kui elemendile ei jää ühtegi alamelementi, siis ct po 'ainult tekst'
                    if (!(hasChildElements(parentId))) {
                        var userData = tree.getUserData(parentId, 'tag'); // a või e | qn | style
                        udItms = userData.split('|');
                        qn = udItms[1];
                        // kirjeldused;; | type.itemType | contentType | type.name
                        var elItms = elemendid[qn].split('|');
                        if (!(elItms[2] == '' || elItms[2] == '1')) { // simpleType v textOnly
                            elItms[1] = SOMITEM_DATATYPE_STRING;
                            elItms[2] = '';
                            elItms[3] = "xs:string";
                            if (udItms[2].indexOf(muudetud) < 0)
                                udItms[2] += muudetud;
                            tree.setUserData(parentId, 'tag', udItms.join('|'));
                            tree.setItemStyle(parentId, udItms[2]);
                        }
                        elemendid[qn] = elItms.join('|');
                    }
                    displayedElem = null;
                    tree.selectItem(parentId, true, false); // id, onSelect func, preserve (eelmine selected)

                    // Nii, nüüd on vaja vanemagrupp igal pool ühesuguseks teha ...
                    equalGroups(parentId);

                    salvestaSeis();
                }
            }

            return;
        } // ClickCMenu


        //'-----------------------------------------------------------------------------------
        function HideDivMenu() {
            var divObj = window.event.srcElement;
            divObj.style.display = "none";
            divObj.style.cursor = "auto";
        } // HideDivMenu


        //'-----------------------------------------------------------------------------------
        function DisableContextMenu() {
            window.event.returnValue = false;
        } // DisableContextMenu


        //'-----------------------------------------------------------------------------------
        function hasChildElements(id) {
            var idd = tree.getSubItems(id).toString(); // nt on ainult üks id. 188, tuleb teha stringiks
            if (idd == '') //pole ühtegi last
                return false;
            var subItems = idd.split(',');
            for (var i in subItems) {
                var userData = tree.getUserData(subItems[i], 'tag'); // a või e | qn | style
                var udItms = userData.split('|');
                if (udItms[0] == 'e')
                    return true;
            }
            return false;
        } // hasChildElements


        //'-----------------------------------------------------------------------------------
        function existsChildAttrName(id, qn) {
            var idd = tree.getSubItems(id).toString(); // nt on ainult üks id. 188, tuleb teha stringiks
            if (idd == '') //pole ühtegi last
                return false;
            var subItems = idd.split(',');
            for (var i in subItems) {
                var text = tree.getItemText(subItems[i]);
                if (text.indexOf('@' + qn + ' ') > -1) {
                    return true;
                }
            }
            return false;
        } // existsChildAttrName


        //'-----------------------------------------------------------------------------------
        function getAttrIdFromQName(qn) {
            // <sr> id == 1
            var subItems = tree.getAllSubItems(1).split(',');
            for (var i in subItems) {
                var userData = tree.getUserData(subItems[i], 'tag'); // a või e | qn
                if (userData.split('|')[0] == 'a') {
                    var text = tree.getItemText(subItems[i]);
                    if (text.indexOf('@' + qn + ' ') > -1) {
                        return subItems[i];
                    }
                }
            }
            return -1;
        } // getAttrIdFromQName


        //'-----------------------------------------------------------------------------------
        function getLastAttrId(id) {
            var lastId = -1;
            var idd = tree.getSubItems(id).toString(); // nt on ainult üks id. 188, tuleb teha stringiks
            if (idd == '') //pole ühtegi last
                return lastId;
            var subItems = idd.split(',');
            for (var i in subItems) {
                var userData = tree.getUserData(subItems[i], 'tag'); // a või e | qn
                if (userData.split('|')[0] == 'a')
                    lastId = subItems[i];
                else
                    return lastId;
            }
            // ainult atribuudid?
            return lastId;
        } // getLastAttrId


        //'-----------------------------------------------------------------------------------
        function equalGroups(pId) {
            // teksti ja qn määramine
            var text = tree.getItemText(pId);
            var userData = tree.getUserData(pId, 'tag'); // a või e | qn | style
            var udItms = userData.split('|');
            var qn = udItms[1];

            // <sr> id == 1
            var subItems = tree.getAllSubItems(1).split(',');
            var samad = '', i;
            for (i in subItems) {
                var t = tree.getItemText(subItems[i]);
                if (t.indexOf(' - &lt;' + qn + '&gt; = ') > -1) {
                    if (!(subItems[i] == pId || tree.getParentId(subItems[i]) == pId)) {
                        samad += ',' + subItems[i];
                    }
                }
            }
            subItems = samad.substr(1).split(',');
            for (i in subItems) {
                tree.deleteChildItems(subItems[i]);
                copyChilds(pId, subItems[i], '');
            }

            return true;
        } // equalGroups


        //'-----------------------------------------------------------------------------------
        function copyChilds(orgId, destId, st) {
            var idd = tree.getSubItems(orgId).toString(); // nt on ainult üks id. 188, tuleb teha stringiks
            if (idd == '') //pole ühtegi last
                return;
            var subItems = idd.split(',');
            for (var i in subItems) {
                var text = tree.getItemText(subItems[i]);
                var userData = tree.getUserData(subItems[i], 'tag'); // a või e | qn | style
                var udItms = userData.split('|');
                treeNodeId++;
                if (udItms[0] == 'a')
                    tree.insertNewChild(destId, treeNodeId, text, 0, attrImage, 0, 0);
                else
                    tree.insertNewChild(destId, treeNodeId, text, 0, 0, 0, 0);

                if (st.length > 0) {
                    if (udItms[2].indexOf(st) < 0)
                        udItms[2] += st;
                }

                tree.setUserData(treeNodeId, 'tag', udItms.join('|'));
                tree.setItemStyle(treeNodeId, udItms[2]);

                copyChilds(subItems[i], treeNodeId, st);
            }
        } // copyChilds


        //'-----------------------------------------------------------------------------------
        function existsChildName(id, qn) {
            var idd = tree.getSubItems(id).toString(); // nt on ainult üks id. 188, tuleb teha stringiks
            if (idd == '') //pole ühtegi last
                return false;
            var subItems = idd.split(',');
            for (var i in subItems) {
                var text = tree.getItemText(subItems[i]);
                if (text.indexOf(' - &lt;' + qn + '&gt; = ') > -1) {
                    return true;
                }
            }
            return false;
        } // existsChildName


        //'-----------------------------------------------------------------------------------
        function getIdFromQName(qn) {
            // <sr> id == 1
            var subItems = tree.getAllSubItems(1).split(',');
            for (var i in subItems) {
                var userData = tree.getUserData(subItems[i], 'tag'); // a või e | qn | style
                if (userData.split('|')[0] == 'e') {
                    var text = tree.getItemText(subItems[i]);
                    if (text.indexOf(' - &lt;' + qn + '&gt; = ') > -1)
                        return subItems[i];
                }
            }
            return -1;
        } // getIdFromQName


        //'-----------------------------------------------------------------------------------
        var uusXsdDom;
        var jubaTehtudQnQn, jubaTehtudElemendid, jubaTehtudAtribuudid;

        var gendXsl2Dom;
        var segad, tekstiga;
        var elemsChoice, attrsChoice, attrsChoiceCt2, paljundamiseChoose, lisadChoice, descsVar, elemNoEdit, attrNoEdit, elemNoDisplay, attrNoDisplay, attrNoCreate;
        var attrNoDelete;

        var struDom;

        var myCSSRules;

        function saveXsd() {
            if (displayedElem)
                updateDisplayedElemConf();

            btnSave.disabled = true;

            uusXsdDom = IDD("", "", false, false, null);
            uusXsdDom.setProperty("SelectionLanguage", "XPath");
            uusXsdDom.setProperty("SelectionNamespaces", nsList);
            uusXsdDom.appendChild(xsdDOM.documentElement.cloneNode(false));

            for (var uri in impSchemaLocations) {
                var xsImport = uusXsdDom.documentElement.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:import", NS_XS));
                xsImport.setAttribute("namespace", uri);
                xsImport.setAttribute("schemaLocation", impSchemaLocations[uri]);
            }

            //var gendXsl2Dom = IDD("string", toimetamisAla.XMLDocument.documentElement.xml, false, false, null);
            gendXsl2Dom = IDD("File", "xsl2.xml", false, false, null);
            if (gendXsl2Dom.parseError.errorCode != 0) {
                //Call ShowXMLParseError(gendViewDom)
                alert(gendXsl2Dom.parseError.reason);
                return;
            }

            var gendXsl2DomRoot = gendXsl2Dom.documentElement;
            gendXsl2DomRoot.removeAttribute("xmlns:pref"); //'read only
            gendXsl2DomRoot.setAttribute("xmlns:pref", DICURI);
            gendXsl2DomRoot.setAttribute("xmlns:" + DICPR, DICURI);

            gendXsl2Dom.setProperty("SelectionLanguage", "XPath");
            gendXsl2Dom.setProperty("SelectionNamespaces", "xmlns:" + NS_XSL_PR + "='" + NS_XSL + "'");

            var elemsTemplate = gendXsl2DomRoot.selectSingleNode("xsl:template[@match = '*'][not(@mode)]");
            elemsChoice = elemsTemplate.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:choose", NS_XSL));

            attrsChoice = gendXsl2DomRoot.selectSingleNode("xsl:template[@match = '*']/tr/td[2]");
            attrsChoice = attrsChoice.insertBefore(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:choose", NS_XSL), attrsChoice.selectSingleNode("xsl:if[starts-with(@test, '@pref:mT')]"));

            attrsChoiceCt2 = gendXsl2DomRoot.selectSingleNode("xsl:template[@match = '*']/tr/td[3]");
            attrsChoiceCt2 = attrsChoiceCt2.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:choose", NS_XSL));

            lisadChoice = gendXsl2DomRoot.selectSingleNode("xsl:template[@match = '*']/tr/td[4]");
            lisadChoice = lisadChoice.insertBefore(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:choose", NS_XSL), lisadChoice.selectSingleNode("xsl:if[starts-with(@test, '*[.')]"));

            paljundamiseChoose = gendXsl2DomRoot.selectSingleNode("xsl:template[@match = '*']/tr/td[1]");
            paljundamiseChoose = paljundamiseChoose.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:choose", NS_XSL));

            descsVar = gendXsl2DomRoot.selectSingleNode("xsl:variable[@name = 'kirjeldavad']");


            jubaTehtudQnQn = ';';
            jubaTehtudElemendid = ';';
            jubaTehtudAtribuudid = ';lang;space;';
            segad = ';';
            tekstiga = ';';
            elemNoEdit = ';';
            attrNoEdit = ';';
            elemNoDisplay = ';';
            attrNoDisplay = ';';
            attrNoCreate = ';';
            attrNoDelete = ';';

            // at jaoks oli ka 'MistyRose', 'Wheat' hea
            myCSSRules = ".enmx {background-color:darkgray;border:black 1px solid;padding:0 3;}\n" +
            ".enx1 {font-weight:bold;}\n" +
            ".et {min-height:5mm;background-color:white;border:black 1px solid;}\n" +
            ".at {min-height:5mm;background-color:MistyRose;border:black 1px solid;}\n" +
            ".atmx {background-color:MistyRose;color:black;border:1px solid black;}\n" +
            ".ct {color:white;background-color:deepskyblue;}\n" +
            ".ec {color:gray;}\n" +
            ".delatt {background-color:Coral;width:2mm}\n" +
            ".etws {display:block;width:100%;}\n";

            if (dic_desc == "vot") {
                myCSSRules += ".ms1 {font-weight:bold;font-style:italic;}\n" +
      ".nr1 {font-weight:bold;}\n" +
      ".sc1 {color:blue;}\n";
            }

            // <sr> id == 1
            var currId = 1, sta;
            sta = kirjutaDom(currId);
            if (sta > 0) {
                tree.focusItem(sta);
                tree.selectItem(sta, true, false); // id, onSelect func, preserve (eelmine selected)
                btnSave.disabled = false;
                return;
            }

            var ix, vanadXsdElemendid, vanaXsdElement, nimi, uusXsdElement, mixedElement;
            var uusDesc, itm;
            // nüüd maha kirjutada need elemendid/atribuudid, mida eelnevalt kuskil ei mainitud
            // a) <xs:any> sisu jaoks defineeritud elemendid
            // b) lihtsalt vanad, unustatud elemendid

            uusXsdElement = uusXsdDom.documentElement.appendChild(uusXsdDom.createNode(NODE_COMMENT, "", ""));
            uusXsdElement.text = "gen: 'xs:any' jaoks defineeritud või unustatud elemendid";

            vanadXsdElemendid = xsdDOM.documentElement.selectNodes("xs:element");
            for (ix = 0; ix < vanadXsdElemendid.length; ix++) {
                vanaXsdElement = vanadXsdElemendid[ix];
                nimi = vanaXsdElement.getAttribute("name");
                uusXsdElement = uusXsdDom.documentElement.selectSingleNode("xs:element[@name = '" + nimi + "']");
                // elemendid[DICPR + ":" + nimi] : kas on skeemis kasutusel
                // !uusXsdElement : uues skeemis teda pole
                if (elemendid[DICPR + ":" + nimi] && !uusXsdElement) {
                    uusXsdDom.documentElement.appendChild(uusXsdDom.importNode(vanaXsdElement, true));

                    mixedElement = vanaXsdElement.selectSingleNode("xs:complexType[@mixed = 'true']");
                    if (mixedElement) {
                        // igaks juhuks 'segad' ülevaatus
                        if (segad.indexOf(';' + DICPR + ':' + nimi + ';') < 0)
                            segad += DICPR + ':' + nimi + ';';
                    }

                    if (vanaXsdElement.selectSingleNode("xs:annotation/xs:documentation")) {
                        uusDesc = descsVar.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "e", ""));
                        uusDesc.setAttribute("n", DICPR + ':' + nimi);

                        itm = vanaXsdElement.selectSingleNode("xs:annotation/xs:documentation[@xml:lang = 'et']");
                        if (itm) {
                            uusDescText = uusDesc.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "t", ""));
                            uusDescText.setAttribute("l", "et");
                            uusDescText.text = itm.text;
                        }
                        itm = vanaXsdElement.selectSingleNode("xs:annotation/xs:documentation[@xml:lang = 'en']");
                        if (itm) {
                            uusDescText = uusDesc.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "t", ""));
                            uusDescText.setAttribute("l", "en");
                            uusDescText.text = itm.text;
                        }
                        itm = vanaXsdElement.selectSingleNode("xs:annotation/xs:documentation[@xml:lang = 'ru']");
                        if (itm) {
                            uusDescText = uusDesc.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "t", ""));
                            uusDescText.setAttribute("l", "ru");
                            uusDescText.text = itm.text;
                        }
                    }
                }
            }

            uusXsdElement = uusXsdDom.documentElement.appendChild(uusXsdDom.createNode(NODE_COMMENT, "", ""));
            uusXsdElement.text = "gen: 'xs:any' sisu elementide jaoks defineeritud või unustatud atribuudid";

            vanadXsdElemendid = xsdDOM.documentElement.selectNodes("xs:attribute");
            for (ix = 0; ix < vanadXsdElemendid.length; ix++) {
                vanaXsdElement = vanadXsdElemendid[ix];
                nimi = vanaXsdElement.getAttribute("name");
                uusXsdElement = uusXsdDom.documentElement.selectSingleNode("xs:attribute[@name = '" + nimi + "']");
                // atribuudid[DICPR + ":" + nimi] : kas on skeemis kasutusel
                // !uusXsdElement : uues skeemis teda pole
                if (atribuudid[DICPR + ":" + nimi] && !uusXsdElement) {
                    uusXsdDom.documentElement.appendChild(uusXsdDom.importNode(vanaXsdElement, true));

                    if (vanaXsdElement.selectSingleNode("xs:annotation/xs:documentation")) {
                        uusDesc = descsVar.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "a", ""));
                        uusDesc.setAttribute("n", DICPR + ':' + nimi);

                        itm = vanaXsdElement.selectSingleNode("xs:annotation/xs:documentation[@xml:lang = 'et']");
                        if (itm) {
                            uusDescText = uusDesc.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "t", ""));
                            uusDescText.setAttribute("l", "et");
                            uusDescText.text = itm.text;
                        }
                        itm = vanaXsdElement.selectSingleNode("xs:annotation/xs:documentation[@xml:lang = 'en']");
                        if (itm) {
                            uusDescText = uusDesc.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "t", ""));
                            uusDescText.setAttribute("l", "en");
                            uusDescText.text = itm.text;
                        }
                        itm = vanaXsdElement.selectSingleNode("xs:annotation/xs:documentation[@xml:lang = 'ru']");
                        if (itm) {
                            uusDescText = uusDesc.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "t", ""));
                            uusDescText.setAttribute("l", "ru");
                            uusDescText.text = itm.text;
                        }
                    }
                }
            }

            var uusXml, indDom, xslPoint;
            indDom = IDD("", "", false, false, null);
            indDom.preserveWhiteSpace = false;
            uusXsdDom.transformNodeToObject(xslIndented, indDom);
            uusXml = indDom.xml;

            indDom = IDD("", "", false, false, null);
            indDom.preserveWhiteSpace = true;
            xsl2ConfDom.transformNodeToObject(xslIndented, indDom);
            var uusConfXml = indDom.xml;


            // algab xsl2 kirjutamine ...
            if (segad.length > 1) {
                xslPoint = gendXsl2DomRoot.selectSingleNode("xsl:variable[@name = 'segad']");
                xslPoint.text = segad;
            }
            if (tekstiga.length > 1) {
                xslPoint = gendXsl2DomRoot.selectSingleNode("xsl:variable[@name = 'tekstiga']");
                xslPoint.text = tekstiga;
            }

            var xh, rspDOM, loadStatus, sta, cnt;
            if (elemNoEdit.length > 1) {
                xslPoint = gendXsl2DomRoot.selectSingleNode("xsl:variable[@name = 'elemNoEdit']");
                xslPoint.text = elemNoEdit;

                //"exsaSetField" salvestab ühe välja teksti, "updateXML" asendab DOM kaudu terve elemendi
                var xh = exCGISync("../tools.cgi", "updateXML" + PD + dic_desc + PD + usrName + PD +
                            "shsconfig_" + dic_desc + ".xml" + PD +
                            "neelems" + PD +
                            "<neelems>" + elemNoEdit + "</neelems>" + PD +
                             "1");

                if (xh.statusText == "OK") {
                    rspDOM = IDD("", "", false, false, null);
                    loadStatus = rspDOM.load(xh.responseXML); //'responseXML: TypeName = DomDocument
                    if (loadStatus) {
                        sta = rspDOM.selectSingleNode("rsp/sta").text;
                        cnt = rspDOM.selectSingleNode("rsp/cnt").text;
                        if (sta == "Success") {
                        } else {
                            alert("<neelems> salvestamine ei õnnestunud!\r\n\r\n" + sta);
                            return;
                        }
                    } else {
                        alert(xh.status + ": " + xh.statusText + "\r\n\r\n" + xh.responseText);
                        return;
                    }
                } else {
                    alert(xh.status + ": " + xh.statusText + "\r\n\r\n" + xh.responseText);
                    return;
                }

            }
            if (attrNoEdit.length > 1) {
                xslPoint = gendXsl2DomRoot.selectSingleNode("xsl:variable[@name = 'attrNoEdit']");
                xslPoint.text = attrNoEdit;

                //"exsaSetField" salvestab ühe välja teksti, "updateXML" asendab DOM kaudu terve elemendi
                var xh = exCGISync("../tools.cgi", "updateXML" + PD + dic_desc + PD + usrName + PD +
                            "shsconfig_" + dic_desc + ".xml" + PD +
                            "neattribs" + PD +
                            "<neattribs>" + attrNoEdit + "</neattribs>" + PD +
                             "1");

                if (xh.statusText == "OK") {
                    rspDOM = IDD("", "", false, false, null);
                    loadStatus = rspDOM.load(xh.responseXML); //'responseXML: TypeName = DomDocument
                    if (loadStatus) {
                        sta = rspDOM.selectSingleNode("rsp/sta").text;
                        cnt = rspDOM.selectSingleNode("rsp/cnt").text;
                        if (sta == "Success") {
                        } else {
                            alert("<neattribs> salvestamine ei õnnestunud!\r\n\r\n" + sta);
                            return;
                        }
                    } else {
                        alert(xh.status + ": " + xh.statusText + "\r\n\r\n" + xh.responseText);
                        return;
                    }
                } else {
                    alert(xh.status + ": " + xh.statusText + "\r\n\r\n" + xh.responseText);
                    return;
                }

            }

            if (elemNoDisplay.length > 1) {
                xslPoint = gendXsl2DomRoot.selectSingleNode("xsl:variable[@name = 'elemNoDisplay']");
                xslPoint.text = elemNoDisplay;
            }
            if (attrNoDisplay.length > 1) {
                xslPoint = gendXsl2DomRoot.selectSingleNode("xsl:variable[@name = 'attrNoDisplay']");
                xslPoint.text = attrNoDisplay;
            }
            if (attrNoCreate.length > 1) {
                xslPoint = gendXsl2DomRoot.selectSingleNode("xsl:variable[@name = 'attrNoCreate']");
                xslPoint.text = attrNoCreate;
            }
            if (attrNoDelete.length > 1) {
                xslPoint = gendXsl2DomRoot.selectSingleNode("xsl:variable[@name = 'attrNoDelete']");
                xslPoint.text = attrNoDelete;
            }

            if (!elemsChoice.hasChildNodes())
                elemsChoice.parentNode.removeChild(elemsChoice);

            if (!attrsChoice.hasChildNodes())
                attrsChoice.parentNode.removeChild(attrsChoice);

            if (!attrsChoiceCt2.hasChildNodes())
                attrsChoiceCt2.parentNode.removeChild(attrsChoiceCt2);

            if (!paljundamiseChoose.hasChildNodes())
                paljundamiseChoose.parentNode.removeChild(paljundamiseChoose);

            if (!lisadChoice.hasChildNodes())
                lisadChoice.parentNode.removeChild(lisadChoice);


            indDom = IDD("", "", false, false, null);
            indDom.preserveWhiteSpace = false;
            gendXsl2Dom.transformNodeToObject(xslIndented, indDom);
            var uusXsl2 = indDom.xml;

            sta = teeStruDom();
            if (sta > 0) {
                tree.focusItem(sta);
                tree.selectItem(sta, true, false); // id, onSelect func, preserve (eelmine selected)
                btnSave.disabled = false;
                return;
            }

            indDom = IDD("", "", false, false, null);
            indDom.preserveWhiteSpace = false;
            struDom.transformNodeToObject(xslIndented, indDom);
            var uusStruDomXml = indDom.xml;

            var xh = exCGISync("../tools.cgi", "saveGendXSD" + PD + dic_desc + PD + usrName + PD +
                uusXml + PD +
                uusConfXml + PD +
                uusXsl2 + PD +
                uusStruDomXml + PD +
                myCSSRules);

            if (xh.statusText == "OK") {
                var rspDOM, status;
                rspDOM = IDD("", "", false, false, null);
                sta = rspDOM.load(xh.responseXML); //'responseXML: TypeName = DomDocument

                if (sta) {
                    status = rspDOM.selectSingleNode("rsp/sta").text;
                    if (status == "Success") {
                        skeemSalvestatud = true;
                        alert("XSD, XSL, konf., strutuuri ja CSS kirjutamine OK!");
                    }
                }
            }
            else {
                alert(xh.status + ": " + xh.statusText + xh.responseText);
            }

            btnSave.disabled = false;

            //window.returnValue = "OK";
            //window.close();

            return;
        } // saveXsd


        //'-----------------------------------------------------------------------------------
        function unNameEditQn(inpStr) {
            // sisse tuleb qualified name 'qn'
            var unStr = inpStr.replace(/:/, "-");
            for (var i = 0; i < inpStr.length; i++)
            // _ pluss number, kusjuures teine märk on koolon (_58)
                unStr += '_' + inpStr.charCodeAt(i);
            return unStr;
        } // unNameEditQn


        //'-----------------------------------------------------------------------------------
        function kirjutaDom(id) {
            var userData = tree.getUserData(id, 'tag'); // a või e | qn | style
            var udItems = userData.split('|');
            var qn = udItems[1];
            var ln = qn;
            if (ln.indexOf(':') > -1)
                ln = ln.substr(ln.indexOf(':') + 1);

            var currItems = elemendid[udItems[1]].split('|');
            var kirjeldused = currItems[0].split(';');
            var it = currItems[1];
            var ct = currItems[2];

            var thisElem, thisAttr, parentQnQn, confItem, uusDesc, uusDescText;

            var parentId = tree.getParentId(id);
            var parentQn = '';

            if (parentId == 0) { // <sr>
                parentQn = "#document";
            }
            else {
                var parentTagItms = tree.getUserData(parentId, 'tag').split('|'); // 'a' v 'e' | qn | style
                parentQn = parentTagItms[1];
            }
            parentQnQn = parentQn + '/' + qn;

            if (jubaTehtudQnQn.indexOf(';' + parentQnQn + ';') < 0) {
                jubaTehtudQnQn += parentQnQn + ';';
            }
            else {
                return 0;
            }

            // juurikas on <elems>
            thisElem = xsl2ConfRoot.selectSingleNode("elem[@name = '" + parentQnQn + "']");

            var uusElement, uusAnnot, uusDocn, elemStyle = '';
            var tekst, korduvus, minOcc, maxOcc;

            var lisatavDom, lisatavStr, lisatudXslElement;

            var uusCt, simpleCont, ext, uusSeq, elRef, attRef;
            var chData, chQn, chLn;
            var idd, childs, ix;

            var newGroupBegin, newAttrGroupBegin, newLisadBegin;

            // alamad
            idd = tree.getSubItems(id).toString();
            if (idd.length > 0) {
                childs = idd.split(',');
            }

            var hasMajors = false;
            var lisaElemendid = '';

            var currElemItems, currElemKirjeldused;
            var lisaStiil, lisaTekst;
            var newNotElemBegin, newNotElemTR;
            var sta;
            var thisChild;

            if (qn == 'xs:any') {
                if (idd.length > 0) {
                    newGroupBegin = elemsChoice.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:when", NS_XSL));
                    // parentQn, sest qn == 'xs:any'
                    newGroupBegin.setAttribute("test", "name() = '" + parentQn + "'");

                    for (ix in childs) {

                        chData = tree.getUserData(childs[ix], 'tag').split('|'); // a või e | qn | style

                        if (chData[0] == 'e') {
                            if (ct == 2) {
                                chData = tree.getUserData(childs[ix], 'tag').split('|'); // a või e | qn | style
                                chQn = chData[1];
                                chLn = chQn.substr(chQn.indexOf(':') + 1);

                                currElemItems = elemendid[chQn].split('|');
                                currElemKirjeldused = currElemItems[0].split(';')

                                thisChild = xsl2ConfRoot.selectSingleNode("elem[@name = '" + qn + "/" + chQn + "']");
                                confItem = thisChild.selectSingleNode("display");

                                if (confItem.text == "1") { // display
                                    confItem = thisChild.selectSingleNode("tableProps/createButton");
                                    if (confItem.text == "1" && chQn != (DICPR + ':A') && chQn != 'xs:any') {
                                        newNotElemBegin = newGroupBegin.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:if", NS_XSL));
                                        newNotElemBegin.setAttribute("test", "not(" + chQn + ")");
                                        newNotElemTR = newNotElemBegin.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "tr", ""));

                                        lisatavDom = IDD("", "", false, false, null);
                                        lisatavDom.preserveWhiteSpace = true;
                                        lisatavStr = "<td width='16px'>" +
					                        "<xsl:element xmlns:xsl='" + NS_XSL + "' name='img'>" +
						                        "<xsl:attribute name='id'>" +
							                        "<xsl:value-of select=\"concat('creategrupp|" + chQn + "|', $elId)\"></xsl:value-of>" +
						                        "</xsl:attribute>" +
						                        "<xsl:attribute name='src'><xsl:value-of select=\"$createGroupPicture\"></xsl:value-of></xsl:attribute>" +
						                        "<xsl:attribute name='alt'>loo</xsl:attribute>" +
						                        "<xsl:attribute name='title'>Loo `" + currElemKirjeldused[keeled[appLang]] + "` &lt;" + chQn + "&gt;!</xsl:attribute>" +
						                        "<xsl:attribute name='tabIndex'>0</xsl:attribute>" +
					                        "</xsl:element>" +
				                        "</td>";
                                        lisatavDom.loadXML(lisatavStr);
                                        if (lisatavDom.parseError.errorCode == 0)
                                            lisatudXslElement = newNotElemTR.appendChild(gendXsl2Dom.importNode(lisatavDom.documentElement, true));
                                        else {
                                            alert(lisatavDom.parseError.reason);
                                            return childs[ix];
                                        }

                                        lisatavDom = IDD("", "", false, false, null);
                                        lisatavDom.preserveWhiteSpace = true;
                                        lisaStiil = '';
                                        if (currElemItems[2] == 2)
                                            lisaStiil = "<xsl:attribute name='style'>text-decoration:underline;</xsl:attribute>";
                                        lisaTekst = '';
                                        if (currElemItems[2] == 3)
                                            lisaTekst = "<span> +</span>";
                                        lisatavStr = "<td width='33%'>" +
                                            "<xsl:variable xmlns:xsl='" + NS_XSL + "' name='xn2'>" +
                                                "<xsl:choose>" +
                                                "<xsl:when test=\"function-available('al:xslNumberToRepString')\">" +
                                                    "<xsl:value-of select=\"al:xslNumberToRepString(string($xn), '&#x00A0;', 0)\"/>" +
                                                "</xsl:when>" +
                                                "<xsl:when test=\"function-available('eRegs:replace')\">" +
                                                  "<xsl:value-of select=\"eRegs:replace($xn, '(\\d+(\\.)?)', 'g', '&#x00A0;')\"/>" +
                                                "</xsl:when>" +
                                                "</xsl:choose>" +
                                            "</xsl:variable>" +
                                            "<xsl:element xmlns:xsl='" + NS_XSL + "' name='span'>" +
                                                "<xsl:value-of select='$xn2'></xsl:value-of>" +
                                            "</xsl:element>" +
                                            "<xsl:element xmlns:xsl='" + NS_XSL + "' name='span'>" +
						                                "<xsl:attribute name='class'>ec noedit</xsl:attribute>" +
						                                "<xsl:attribute name='tabIndex'>0</xsl:attribute>" + lisaStiil + currElemKirjeldused[keeled[appLang]] + "</xsl:element>" +
                                            lisaTekst +
				                        "</td>";
                                        lisatavDom.loadXML(lisatavStr);
                                        if (lisatavDom.parseError.errorCode == 0)
                                            lisatudXslElement = newNotElemTR.appendChild(gendXsl2Dom.importNode(lisatavDom.documentElement, true));
                                        else {
                                            alert(lisatavDom.parseError.reason);
                                            return childs[ix];
                                        }

                                        lisatudXslElement = newNotElemTR.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "td", ""));
                                        //lisatudXslElement.setAttribute("width", "256px");
                                        lisatudXslElement = newNotElemTR.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "td", ""));
                                        lisatudXslElement.setAttribute("width", "32px");
                                    } // createButton == 1

                                    lisatavDom = IDD("", "", false, false, null);
                                    lisatavDom.preserveWhiteSpace = true;
                                    lisatavStr = "<xsl:apply-templates xmlns:xsl='" + NS_XSL + "' select='" + chQn + "'>" +
			                            "<xsl:with-param name='rada'>" +
				                            "<xsl:value-of select=\"concat($elId, '/')\"></xsl:value-of>" +
			                            "</xsl:with-param>" +
                                    "</xsl:apply-templates>";
                                    lisatavDom.loadXML(lisatavStr);
                                    if (lisatavDom.parseError.errorCode == 0)
                                        lisatudXslElement = newGroupBegin.appendChild(gendXsl2Dom.importNode(lisatavDom.documentElement, true));
                                    else {
                                        alert(lisatavDom.parseError.reason);
                                        return childs[ix];
                                    }

                                    confItem = thisChild.selectSingleNode("tableProps/major").text;
                                    if (confItem == "1")
                                        hasMajors = true;

                                    if (lisaElemendid.length > 0) {
                                        lisaElemendid += " and ";
                                    }
                                    lisaElemendid += chQn;

                                } // display == 1
                            } // if (ct == 2) {
                            sta = kirjutaDom(childs[ix]);
                            if (sta > 0)
                                return sta;
                        } // if (chData[0] == 'e') { (xs:any)
                    } // for (ix in childs) {

                    if (lisaElemendid.length > 0) {
                        newLisadBegin = lisadChoice.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:when", NS_XSL));
                        // parentQn, sest qn == 'xs:any'
                        newLisadBegin.setAttribute("test", "name() = '" + parentQn + "'");

                        lisatavDom = IDD("", "", false, false, null);
                        lisatavDom.preserveWhiteSpace = true;
                        lisatavStr = "<xsl:if xmlns:xsl='" + NS_XSL + "' test='not(" + lisaElemendid + ")'>" +
					        "<xsl:element name='img'>" +
						        "<xsl:attribute name='id'>" +
							        "<xsl:value-of select=\"concat('addlisad||', $elId)\"></xsl:value-of>" +
						        "</xsl:attribute>" +
						        "<xsl:attribute name='src'><xsl:value-of select=\"$addLisadPicture\"></xsl:value-of></xsl:attribute>" +
						        "<xsl:attribute name='alt'>lisa_puuduvad</xsl:attribute>" +
						        "<xsl:attribute name='title'>Lisa puuduvad elemendid!</xsl:attribute>" +
						        "<xsl:attribute name='tabIndex'>0</xsl:attribute>" +
					        "</xsl:element>" +
				        "</xsl:if>";
                        lisatavDom.loadXML(lisatavStr);
                        if (lisatavDom.parseError.errorCode == 0)
                            lisatudXslElement = newLisadBegin.appendChild(gendXsl2Dom.importNode(lisatavDom.documentElement, true));
                        else {
                            alert(lisatavDom.parseError.reason);
                            return id;
                        }
                    }

                    if (!newGroupBegin.hasChildNodes())
                        newGroupBegin.parentNode.removeChild(newGroupBegin);

                    //                if (ct == 2 && (!hasMajors) && (id != 1)) {
                    //                    alert("Elemendil <" + qn + "> puuduvad põhielemendid! Igas grupis po vähemalt 1 põhielement!");
                    //                    return id;
                    //                }

                } // if (idd.length > 0) {

                return 0;

            } // if (qn == 'xs:any') {


            if (jubaTehtudElemendid.indexOf(';' + ln + ';') < 0) {
                uusElement = uusXsdDom.documentElement.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:element", NS_XS));
                uusElement.setAttribute("name", ln);
                uusAnnot = uusElement.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:annotation", NS_XS));
                uusDocn = uusAnnot.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:documentation", NS_XS));
                uusDocn.setAttribute("xml:lang", "et");
                if (kirjeldused[0] == '') {
                    alert("Elemendil <" + udItems[1] + "> puudub eestikeelne nimetus!");
                    return id;
                }
                uusDocn.text = kirjeldused[0];
                uusDocn = uusAnnot.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:documentation", NS_XS));
                uusDocn.setAttribute("xml:lang", "en");
                if (kirjeldused[1] == '') {
                    alert("Elemendil <" + udItems[1] + "> puudub inglisekeelne nimetus!");
                    return id;
                }

                uusDocn.text = kirjeldused[1];
                uusDocn = uusAnnot.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:documentation", NS_XS));
                uusDocn.setAttribute("xml:lang", "ru");
                uusDocn.text = kirjeldused[2];

                uusDesc = descsVar.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "e", ""));
                uusDesc.setAttribute("n", qn);
                uusDescText = uusDesc.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "t", ""));
                uusDescText.setAttribute("l", "et");
                uusDescText.text = kirjeldused[0];

                uusDescText = uusDesc.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "t", ""));
                uusDescText.setAttribute("l", "en");
                uusDescText.text = kirjeldused[1];

                uusDescText = uusDesc.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "t", ""));
                uusDescText.setAttribute("l", "ru");
                uusDescText.text = kirjeldused[2];

                if (it == SOMITEM_COMPLEXTYPE) {
                    uusCt = uusElement.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:complexType", NS_XS));
                    if (ct == '3') {
                        uusCt.setAttribute("mixed", "true");
                    }
                    if (ct == '1') {
                        simpleCont = uusCt.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:simpleContent", NS_XS));
                        ext = simpleCont.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:extension", NS_XS));
                        ext.setAttribute("base", currItems[3]);
                        if (idd.length > 0) {
                            childs = idd.split(',');
                            for (ix in childs) {
                                chData = tree.getUserData(childs[ix], 'tag').split('|'); // a või e | qn | style
                                if (chData[0] == 'a') {
                                    tekst = tree.getItemText(childs[ix]);
                                    chQn = chData[1];
                                    attRef = ext.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:attribute", NS_XS));
                                    attRef.setAttribute("ref", chQn);
                                    if (tekst.indexOf(' [obl] = ') > -1)
                                        attRef.setAttribute("use", "required");
                                }
                            }
                        }
                    }
                    else {
                        uusSeq = uusCt.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:sequence", NS_XS));
                        if (idd.length > 0) {
                            childs = idd.split(',');
                            for (ix in childs) {
                                chData = tree.getUserData(childs[ix], 'tag').split('|'); // a või e | qn | style
                                chQn = chData[1];
                                if (chData[0] == 'e') {

                                    //<xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="skip"/>

                                    if (chQn == 'xs:any') {
                                        elRef = uusSeq.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:any", NS_XS));
                                        elRef.setAttribute("namespace", "##any");
                                        elRef.setAttribute("processContents", "skip");
                                    }
                                    else {
                                        elRef = uusSeq.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:element", NS_XS));
                                        elRef.setAttribute("ref", chQn);
                                    }
                                    tekst = tree.getItemText(childs[ix]);
                                    korduvus = tekst.substr(tekst.indexOf("[") + 1);
                                    korduvus = korduvus.substr(0, korduvus.indexOf("]"));
                                    maxOcc = korduvus.substr(korduvus.indexOf(" ") + 1);
                                    if (maxOcc == '-1')
                                        maxOcc = "unbounded";
                                    minOcc = korduvus.substr(0, korduvus.indexOf(","));
                                    elRef.setAttribute("minOccurs", minOcc);
                                    elRef.setAttribute("maxOccurs", maxOcc);
                                }
                            }
                            for (ix in childs) {
                                chData = tree.getUserData(childs[ix], 'tag').split('|'); // a või e | qn | style
                                if (chData[0] == 'a') {
                                    tekst = tree.getItemText(childs[ix]);
                                    chQn = chData[1];
                                    attRef = uusCt.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:attribute", NS_XS));
                                    attRef.setAttribute("ref", chQn);
                                    if (tekst.indexOf(' [obl] = ') > -1) {
                                        attRef.setAttribute("use", "required");
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    uusElement.setAttribute("type", currItems[3]);
                }


                elemStyle = "";
                confItem = thisElem.selectSingleNode("colorsFont/font-family");
                if (confItem.text.length > 0)
                    elemStyle += "font-family:" + confItem.text + ";";
                confItem = thisElem.selectSingleNode("colorsFont/font-size");
                if (confItem.text.length > 0)
                    elemStyle += "font-size:" + confItem.text + ";";
                confItem = thisElem.selectSingleNode("colorsFont/color");
                if (confItem.text.length > 0)
                    elemStyle += "color:" + confItem.text + ";";
                confItem = thisElem.selectSingleNode("colorsFont/background-color");
                if (confItem.text.length > 0)
                    elemStyle += "background-color:" + confItem.text + ";";
                confItem = thisElem.selectSingleNode("colorsFont/font-weight_bold");
                if (confItem.text == "1")
                    elemStyle += "font-weight:bold;";
                confItem = thisElem.selectSingleNode("colorsFont/font-style_italic");
                if (confItem.text == "1")
                    elemStyle += "font-style:italic;";
                confItem = thisElem.selectSingleNode("colorsFont/text-decoration_underline");
                if (confItem.text == "1")
                    elemStyle += "text-decoration:underline;";
                confItem = thisElem.selectSingleNode("colorsFont/font-variant_small-caps");
                if (confItem.text == "1")
                    elemStyle += "font-variant:small-caps;";

                //                if (elemNoShow.indexOf(";" + ln + ";") > -1)
                //                    elemStyle += "font-size:x-small;";

                // className-d on toimetamisalas ja vaates erinevad:
                // vaates: qn.replace(':', '_') + numbrid ln-ist
                // toimetamisalas: qn.replace(':', '-') + numbrid kogu qn-ist
                if (elemStyle.length > 0) {
                    myCSSRules += ".et_" + unNameEditQn(qn) + " {" + elemStyle + "}\n";
                    myCSSRules += ".et_" + qn.replace(":", "-") + " {" + elemStyle + "}\n";
                }


                if (idd.length > 0) {
                    for (ix in childs) {
                        chData = tree.getUserData(childs[ix], 'tag').split('|'); // a või e | qn | style
                        chQn = chData[1];
                        chLn = chQn.substr(chQn.indexOf(':') + 1);
                        if (chData[0] == 'a') {
                            var currAttribItems = atribuudid[chQn].split('|');
                            if (jubaTehtudAtribuudid.indexOf(';' + chLn + ';') < 0) {
                                var uusAtribuut = uusXsdDom.documentElement.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:attribute", NS_XS));
                                uusAtribuut.setAttribute("name", chLn);
                                uusAtribuut.setAttribute("type", currAttribItems[3]);

                                kirjeldused = currAttribItems[0].split(';');
                                uusAnnot = uusAtribuut.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:annotation", NS_XS));
                                uusDocn = uusAnnot.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:documentation", NS_XS));
                                uusDocn.setAttribute("xml:lang", "et");
                                if (kirjeldused[0] == '') {
                                    alert("Atribuudil @" + chQn + " puudub eestikeelne nimetus!");
                                    return childs[ix];
                                }
                                uusDocn.text = kirjeldused[0];
                                uusDocn = uusAnnot.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:documentation", NS_XS));
                                uusDocn.setAttribute("xml:lang", "en");
                                if (kirjeldused[1] == '') {
                                    alert("Atribuudil @" + chQn + " puudub inglisekeelne nimetus!");
                                    return childs[ix];
                                }
                                uusDocn.text = kirjeldused[1];
                                uusDocn = uusAnnot.appendChild(uusXsdDom.createNode(NODE_ELEMENT, "xs:documentation", NS_XS));
                                uusDocn.setAttribute("xml:lang", "ru");
                                uusDocn.text = kirjeldused[2];

                                uusDesc = descsVar.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "a", ""));
                                uusDesc.setAttribute("n", chQn);
                                uusDescText = uusDesc.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "t", ""));
                                uusDescText.setAttribute("l", "et");
                                uusDescText.text = kirjeldused[0];

                                uusDescText = uusDesc.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "t", ""));
                                uusDescText.setAttribute("l", "en");
                                uusDescText.text = kirjeldused[1];

                                uusDescText = uusDesc.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "t", ""));
                                uusDescText.setAttribute("l", "ru");
                                uusDescText.text = kirjeldused[2];


                                thisAttr = thisElem.selectSingleNode("attrs/attr[@name = '" + chQn + "']");
                                confItem = thisAttr.selectSingleNode("attr_display");
                                if (confItem.text == "1") {
                                    var attrStyle = "";
                                    confItem = thisAttr.selectSingleNode("attr_colorsFont/attr_font-family");
                                    if (confItem.text.length > 0)
                                        attrStyle += "font-family:" + confItem.text + ";";
                                    confItem = thisAttr.selectSingleNode("attr_colorsFont/attr_font-size");
                                    if (confItem.text.length > 0)
                                        attrStyle += "font-size:" + confItem.text + ";";
                                    confItem = thisAttr.selectSingleNode("attr_colorsFont/attr_color");
                                    if (confItem.text.length > 0)
                                        attrStyle += "color:" + confItem.text + ";";
                                    confItem = thisAttr.selectSingleNode("attr_colorsFont/attr_background-color");
                                    if (confItem.text.length > 0)
                                        attrStyle += "background-color:" + confItem.text + ";";
                                    confItem = thisAttr.selectSingleNode("attr_colorsFont/attr_font-weight_bold");
                                    if (confItem.text == "1")
                                        attrStyle += "font-weight:bold;";
                                    confItem = thisAttr.selectSingleNode("attr_colorsFont/attr_font-style_italic");
                                    if (confItem.text == "1")
                                        attrStyle += "font-style:italic;";
                                    confItem = thisAttr.selectSingleNode("attr_colorsFont/attr_text-decoration_underline");
                                    if (confItem.text == "1")
                                        attrStyle += "text-decoration:underline;";
                                    confItem = thisAttr.selectSingleNode("attr_colorsFont/attr_font-variant_small-caps");
                                    if (confItem.text == "1")
                                        attrStyle += "font-variant:small-caps;";

                                    // className-d on toimetamisalas ja vaates erinevad:
                                    // vaates: qn.replace(':', '_') + numbrid ln-ist
                                    // toimetamisalas: qn.replace(':', '-') + numbrid kogu qn-ist
                                    if (attrStyle.length > 0) {
                                        myCSSRules += ".at_" + unNameEditQn(chQn) + " {" + attrStyle + "}\n";
                                        myCSSRules += ".at_" + chQn.replace(":", "-") + " {" + attrStyle + "}\n";
                                    }
                                }

                                jubaTehtudAtribuudid += chLn + ';';
                            }
                        }
                    }
                }

                jubaTehtudElemendid += ln + ';';

            } // if (jubaTehtudElemendid.indexOf(';' + ln + ';') < 0) {


            confItem = thisElem.selectSingleNode("display");
            if (confItem.text == "1") {

                //confItem = thisElem.selectSingleNode("tableProps/addButton");
                //if (confItem.text == "1" && ln != 'A') {
                //    lisatavad += qn + ';';
                //}

                tekst = tree.getItemText(id);
                korduvus = tekst.substr(tekst.indexOf("[") + 1);
                korduvus = korduvus.substr(0, korduvus.indexOf("]"));
                maxOcc = korduvus.substr(korduvus.indexOf(" ") + 1);
                minOcc = korduvus.substr(0, korduvus.indexOf(","));
                var maxOccNum = parseInt(maxOcc);
                if (maxOccNum == -1) {
                    maxOccNum = Number.MAX_VALUE;
                }

                if (ln != 'A') {

                    var opTingimus, ifObj;
                    var vanemElement = parentQn;
                    if (vanemElement == "xs:any") {
                        var parentParentId = tree.getParentId(parentId);
                        var parentParentTagItms = tree.getUserData(parentParentId, 'tag').split('|'); // 'a' v 'e' | qn | style
                        vanemElement = parentParentTagItms[1];
                    }

                    if (maxOcc != "1" || maxOccNum > minOcc) {
                        lisatudXslElement = paljundamiseChoose.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:when", NS_XSL));
                        lisatudXslElement.setAttribute("test", "self::" + qn + "[name(..) = '" + vanemElement + "']");

                        // lisemise (addgrupp) tingimused
                        if (maxOcc != "1") {
                            opTingimus = '';
                            if (maxOcc != "-1") {
                                opTingimus += "$paljuMindOn < " + maxOcc;
                            }
                            if (opTingimus) {
                                ifObj = lisatudXslElement.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:if", NS_XSL));
                                ifObj.setAttribute("test", opTingimus);
                            }
                            else {
                                ifObj = lisatudXslElement;
                            }
                            lisatavDom = IDD("", "", false, false, null);
                            lisatavDom.preserveWhiteSpace = true;
                            lisatavStr = "<img id=\"{concat('addgrupp||', $elId)}\" src='{$addGroupPicture}' alt='lisa' title=\"{concat('Lisa `', $k, '` &lt;', name(), '&gt;!')}\" tabIndex='0'></img>";
                            lisatavDom.loadXML(lisatavStr);
                            if (lisatavDom.parseError.errorCode == 0)
                                ifObj = ifObj.appendChild(gendXsl2Dom.importNode(lisatavDom.documentElement, true));
                            else {
                                alert(lisatavDom.parseError.reason);
                                return id;
                            }
                        }

                        // kustutamise (delgrupp) tingimused
                        if (maxOccNum > minOcc) {
                            opTingimus = "$paljuMindOn > " + minOcc;
                            ifObj = lisatudXslElement.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:if", NS_XSL));
                            ifObj.setAttribute("test", opTingimus);
                            lisatavDom = IDD("", "", false, false, null);
                            lisatavDom.preserveWhiteSpace = true;
                            lisatavStr = "<img id=\"{concat('delgrupp||', $elId)}\" src='{$delGroupPicture}' alt='kustuta' title=\"{concat('Kustuta `', $k, '` &lt;', name(), '&gt;!')}\" tabIndex='0'></img>";
                            lisatavDom.loadXML(lisatavStr);
                            if (lisatavDom.parseError.errorCode == 0)
                                ifObj = ifObj.appendChild(gendXsl2Dom.importNode(lisatavDom.documentElement, true));
                            else {
                                alert(lisatavDom.parseError.reason);
                                return id;
                            }
                        }
                    }
                }
            }
            else {
                elemNoDisplay += parentQnQn + ';';
            }

            if (it == SOMITEM_COMPLEXTYPE) {
                if (ct == "3") {
                    if (segad.indexOf(';' + qn + ';') < 0) {
                        segad += qn + ';';
                    }
                }
                else if (ct == "1") {
                    if (tekstiga.indexOf(';' + qn + ';') < 0) {
                        tekstiga += qn + ';';
                    }
                }
            }
            else {
                if (tekstiga.indexOf(';' + qn + ';') < 0) {
                    tekstiga += qn + ';';
                }
            }

            confItem = thisElem.selectSingleNode("tableProps/editable");
            // 2, 3 tüübiga elemendid peaksid kõik olema 'editable' ja neid muuta dialoogis ei saa
            if (confItem.text != "1") {
                elemNoEdit += parentQnQn + ';';
            } else {
                if (parentQnQn == DICPR + ":A/" + DICPR + ":G") {
                    elemNoEdit += parentQnQn + ';';
                }
                if (parentQnQn == DICPR + ":A/" + DICPR + ":K") {
                    elemNoEdit += parentQnQn + ';';
                }
                if (parentQnQn == DICPR + ":A/" + DICPR + ":KA") {
                    elemNoEdit += parentQnQn + ';';
                }
                if (parentQnQn == DICPR + ":A/" + DICPR + ":KL") {
                    elemNoEdit += parentQnQn + ';';
                }
                if (parentQnQn == DICPR + ":A/" + DICPR + ":T") {
                    elemNoEdit += parentQnQn + ';';
                }
                if (parentQnQn == DICPR + ":A/" + DICPR + ":TA") {
                    elemNoEdit += parentQnQn + ';';
                }
                if (parentQnQn == DICPR + ":A/" + DICPR + ":TL") {
                    elemNoEdit += parentQnQn + ';';
                }
                if (parentQnQn == DICPR + ":A/" + DICPR + ":PT") {
                    elemNoEdit += parentQnQn + ';';
                }
                if (parentQnQn == DICPR + ":A/" + DICPR + ":PTA") {
                    elemNoEdit += parentQnQn + ';';
                }
                if (parentQnQn == DICPR + ":A/" + DICPR + ":X") {
                    elemNoEdit += parentQnQn + ';';
                }
                if (parentQnQn == DICPR + ":A/" + DICPR + ":XA") {
                    elemNoEdit += parentQnQn + ';';
                }
            }


            if (idd.length > 0) {
                newGroupBegin = elemsChoice.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:when", NS_XSL));
                newGroupBegin.setAttribute("test", "name() = '" + qn + "'");

                if (ct == 2) {
                    newAttrGroupBegin = attrsChoiceCt2.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:when", NS_XSL));
                }
                else {
                    newAttrGroupBegin = attrsChoice.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:when", NS_XSL));
                }
                newAttrGroupBegin.setAttribute("test", "name() = '" + qn + "'");

                for (ix in childs) {
                    chData = tree.getUserData(childs[ix], 'tag').split('|'); // a või e | qn | style
                    chQn = chData[1];
                    chLn = chQn.substr(chQn.indexOf(':') + 1);

                    if (chData[0] == 'a') {
                        tekst = tree.getItemText(childs[ix]);

                        thisAttr = thisElem.selectSingleNode("attrs/attr[@name = '" + chQn + "']");
                        confItem = thisAttr.selectSingleNode("attr_tableProps/attr_editable");
                        var attrParentQnQn = qn + '/@' + chQn;
                        if (confItem.text != "1") {
                            if (attrNoEdit.indexOf(';' + attrParentQnQn + ';') < 0) {
                                attrNoEdit += attrParentQnQn + ';';
                            }
                        } else {
                            if (attrParentQnQn == DICPR + ":m/@" + DICPR + ":O") {
                                attrNoEdit += attrParentQnQn + ';';
                            }
                        }

                        if (tekst.indexOf(" [obl] ") > -1) {
                            if (attrNoDelete.indexOf(';' + attrParentQnQn + ';') < 0) {
                                attrNoDelete += attrParentQnQn + ';';
                            }
                        } else {
                            if (attrNoEdit.indexOf(';' + attrParentQnQn + ';') > -1) {
                                attrNoDelete += attrParentQnQn + ';';
                            }
                        }

                        confItem = thisAttr.selectSingleNode("attr_tableProps/attr_createButton");
                        if (confItem.text != "1") {
                            if (attrNoCreate.indexOf(';' + qn + '/@' + chQn + ';') < 0) {
                                attrNoCreate += qn + '/@' + chQn + ';';
                            }
                        }

                        confItem = thisAttr.selectSingleNode("attr_display");
                        if (confItem.text == "1") {
                            lisatavDom = IDD("", "", false, false, null);
                            lisatavDom.preserveWhiteSpace = true;
                            lisatavStr = "<xsl:call-template xmlns:xsl='" + NS_XSL + "' name='sekeldaAtribuut'>" +
                                  "<xsl:with-param name='elId'>" +
                                    "<xsl:value-of select='$elId'></xsl:value-of>" +
                                  "</xsl:with-param>" +
                                  "<xsl:with-param name='fullQn'>" + qn + '/@' + chQn + "</xsl:with-param>" +
                                "</xsl:call-template>"
                            lisatavDom.loadXML(lisatavStr);
                            if (lisatavDom.parseError.errorCode == 0)
                                lisatudXslElement = newAttrGroupBegin.appendChild(gendXsl2Dom.importNode(lisatavDom.documentElement, true));
                            else {
                                alert(lisatavDom.parseError.reason);
                                return childs[ix];
                            }
                        }
                        else { // display == 1
                            if (attrNoDisplay.indexOf(';' + qn + '/@' + chQn + ';') < 0) {
                                attrNoDisplay += qn + '/@' + chQn + ';';
                            }
                        }
                    }
                    else { // elemendid

                        if (ct == 2) {
                            currElemItems = elemendid[chQn].split('|');
                            currElemKirjeldused = currElemItems[0].split(';')

                            thisChild = xsl2ConfRoot.selectSingleNode("elem[@name = '" + qn + "/" + chQn + "']");
                            confItem = thisChild.selectSingleNode("display");

                            if (confItem.text == "1") { // display
                                confItem = thisChild.selectSingleNode("tableProps/createButton");
                                if (confItem.text == "1" && chQn != (DICPR + ':A') && chQn != 'xs:any') {
                                    newNotElemBegin = newGroupBegin.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:if", NS_XSL));
                                    newNotElemBegin.setAttribute("test", "not(" + chQn + ")");
                                    newNotElemTR = newNotElemBegin.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "tr", ""));

                                    lisatavDom = IDD("", "", false, false, null);
                                    lisatavDom.preserveWhiteSpace = true;
                                    // 'võib sisse kleepuda ka puhas XSLT
                                    lisatavStr = "<td width='16px'>" +
					                    "<xsl:element xmlns:xsl='" + NS_XSL + "' name='img'>" +
						                    "<xsl:attribute name='id'>" +
							                    "<xsl:value-of select=\"concat('creategrupp|" + chQn + "|', $elId)\"></xsl:value-of>" +
						                    "</xsl:attribute>" +
						                    "<xsl:attribute name='src'><xsl:value-of select=\"$createGroupPicture\"></xsl:value-of></xsl:attribute>" +
						                    "<xsl:attribute name='alt'>loo</xsl:attribute>" +
						                    "<xsl:attribute name='title'>Loo `" + currElemKirjeldused[keeled[appLang]] + "` &lt;" + chQn + "&gt;!</xsl:attribute>" +
						                    "<xsl:attribute name='tabIndex'>0</xsl:attribute>" +
					                    "</xsl:element>" +
				                    "</td>";
                                    lisatavDom.loadXML(lisatavStr);
                                    if (lisatavDom.parseError.errorCode == 0)
                                        lisatudXslElement = newNotElemTR.appendChild(gendXsl2Dom.importNode(lisatavDom.documentElement, true));
                                    else {
                                        alert(lisatavDom.parseError.reason);
                                        return childs[ix];
                                    }

                                    lisatavDom = IDD("", "", false, false, null);
                                    lisatavDom.preserveWhiteSpace = true;
                                    lisaStiil = '';
                                    if (currElemItems[2] == 2)
                                        lisaStiil = "<xsl:attribute name='style'>text-decoration:underline;</xsl:attribute>";
                                    lisaTekst = '';
                                    if (currElemItems[2] == 3)
                                        lisaTekst = "<span> +</span>";
                                    lisatavStr = "<td width='33%'>" +
                                        "<xsl:variable xmlns:xsl='" + NS_XSL + "' name='xn2'>" +
                                          "<xsl:choose>" +
                                            "<xsl:when test=\"function-available('al:xslNumberToRepString')\">" +
                                              "<xsl:value-of select=\"al:xslNumberToRepString(string($xn), '&#x00A0;', 0)\"/>" +
                                            "</xsl:when>" +
                                            "<xsl:when test=\"function-available('eRegs:replace')\">" +
                                              "<xsl:value-of select=\"eRegs:replace($xn, '(\\d+(\\.)?)', 'g', '&#x00A0;')\"/>" +
                                            "</xsl:when>" +
                                          "</xsl:choose>" +
                                        "</xsl:variable>" +
                                        "<xsl:element xmlns:xsl='" + NS_XSL + "' name='span'>" +
                                          "<xsl:value-of select='$xn2'></xsl:value-of>" +
                                        "</xsl:element>" +
                                        "<xsl:element xmlns:xsl='" + NS_XSL + "' name='span'>" +
						                            "<xsl:attribute name='class'>ec noedit</xsl:attribute>" +
						                            "<xsl:attribute name='tabIndex'>0</xsl:attribute>" + lisaStiil + currElemKirjeldused[keeled[appLang]] + "</xsl:element>" +
                                        lisaTekst +
				                    "</td>";
                                    lisatavDom.loadXML(lisatavStr);
                                    if (lisatavDom.parseError.errorCode == 0)
                                        lisatudXslElement = newNotElemTR.appendChild(gendXsl2Dom.importNode(lisatavDom.documentElement, true));
                                    else {
                                        alert(lisatavDom.parseError.reason);
                                        return childs[ix];
                                    }

                                    lisatudXslElement = newNotElemTR.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "td", ""));
                                    //lisatudXslElement.setAttribute("width", "256px");
                                    lisatudXslElement = newNotElemTR.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "td", ""));
                                    lisatudXslElement.setAttribute("width", "32px");
                                } // createButton == 1

                                lisatavDom = IDD("", "", false, false, null);
                                lisatavDom.preserveWhiteSpace = true;
                                var otsitav = chQn;
                                if (chQn == 'xs:any')
                                    otsitav = '*';
                                lisatavStr = "<xsl:apply-templates xmlns:xsl='" + NS_XSL + "' select='" + otsitav + "'>" +
			                        "<xsl:with-param name='rada'>" +
				                        "<xsl:value-of select=\"concat($elId, '/')\"></xsl:value-of>" +
			                        "</xsl:with-param>" +
                                "</xsl:apply-templates>";
                                lisatavDom.loadXML(lisatavStr);
                                if (lisatavDom.parseError.errorCode == 0)
                                    lisatudXslElement = newGroupBegin.appendChild(gendXsl2Dom.importNode(lisatavDom.documentElement, true));
                                else {
                                    alert(lisatavDom.parseError.reason);
                                    return childs[ix];
                                }

                                confItem = thisChild.selectSingleNode("tableProps/major").text;
                                if (confItem == "1")
                                    hasMajors = true;

                                if (lisaElemendid.length > 0) {
                                    lisaElemendid += " and ";
                                }
                                lisaElemendid += chQn;

                            } // display == 1
                        } // if (ct == 2) {

                        sta = kirjutaDom(childs[ix]);
                        if (sta > 0)
                            return sta;
                    }
                } // for (ix in childs) {

                if (lisaElemendid.length > 0) {
                    newLisadBegin = lisadChoice.appendChild(gendXsl2Dom.createNode(NODE_ELEMENT, "xsl:when", NS_XSL));
                    newLisadBegin.setAttribute("test", "name() = '" + qn + "'");

                    lisatavDom = IDD("", "", false, false, null);
                    lisatavDom.preserveWhiteSpace = true;
                    lisatavStr = "<xsl:if xmlns:xsl='" + NS_XSL + "' test='not(" + lisaElemendid + ")'>" +
					    "<xsl:element name='img'>" +
						    "<xsl:attribute name='id'>" +
							    "<xsl:value-of select=\"concat('addlisad||', $elId)\"></xsl:value-of>" +
						    "</xsl:attribute>" +
						    "<xsl:attribute name='src'><xsl:value-of select=\"$addLisadPicture\"></xsl:value-of></xsl:attribute>" +
						    "<xsl:attribute name='alt'>lisa_puuduvad</xsl:attribute>" +
						    "<xsl:attribute name='title'>Lisa puuduvad elemendid!</xsl:attribute>" +
						    "<xsl:attribute name='tabIndex'>0</xsl:attribute>" +
					    "</xsl:element>" +
				    "</xsl:if>";
                    lisatavDom.loadXML(lisatavStr);
                    if (lisatavDom.parseError.errorCode == 0)
                        lisatudXslElement = newLisadBegin.appendChild(gendXsl2Dom.importNode(lisatavDom.documentElement, true));
                    else {
                        alert(lisatavDom.parseError.reason);
                        return id;
                    }
                }

                if (!newGroupBegin.hasChildNodes())
                    newGroupBegin.parentNode.removeChild(newGroupBegin);
                if (!newAttrGroupBegin.hasChildNodes())
                    newAttrGroupBegin.parentNode.removeChild(newAttrGroupBegin);

                //                if (ct == 2 && (!hasMajors) && (id != 1)) {
                //                    alert("Elemendil <" + qn + "> puuduvad põhielemendid! Igas grupis po vähemalt 1 põhielement!");
                //                    return id;
                //                }

            } // if (idd.length > 0) {

            return 0;
        } // kirjutaDom


        //'-----------------------------------------------------------------------------------
        function contentTypeChanged() {
            var selectId = tree.getSelectedItemId();
            var userData = tree.getUserData(selectId, 'tag'); // a või e | qn | style
            var udItms = userData.split('|');
            var itmItms;
            // kirjeldused;; | type.itemType | contentType | type.name
            if (udItms[0] == 'a')
                itmItms = atribuudid[udItms[1]].split('|');
            else
                itmItms = elemendid[udItms[1]].split('|');

            var ctId = selContentType.options(selContentType.selectedIndex).id;
            switch (ctId) {
                case '1': // ainult tekst
                    if (hasChildElements(selectId)) {
                        alert("Liigiks on valitud '" + selContentType.options(ctId).innerText + "' aga on olemas allelemendid!\nEemalda kõigepealt allelemendid!");
                        selContentType.options(itmItms[2]).selected = true;
                        return;
                    }
                    selDataType.disabled = false;
                    break;
                case '2': // ainult elemendid
                    if (!hasChildElements(selectId)) {
                        alert("Liigiks on valitud '" + selContentType.options(ctId).innerText + "' aga allelemendid puuduvad!\nLisa kõigepealt allelemendid!");
                        selContentType.options('1').selected = true; // ainult tekst
                        return;
                    }
                    selDataType.options(0).selected = true;
                    selDataType.disabled = true;
                    break;
                case '3': // tekst JA elemendid
                    if (!hasChildElements(selectId)) {
                        alert("Liigiks on valitud '" + selContentType.options(ctId).innerText + "' aga allelemendid puuduvad!\nLisa kõigepealt allelemendid!");
                        selContentType.options('1').selected = true; // ainult tekst
                        return;
                    }
                    selDataType.options(0).selected = true;
                    selDataType.disabled = true;
                    break;
            }
            return;
        } // contentTypeChanged


        //'-----------------------------------------------------------------------------------
        function getPrevTag() { // ülespoole
            if (inpCurrTag.value.length < 1) {
                spnSrchInfo.innerText = '-: 0/0';
                return;
            }
            var otsitav;
            if (inpCurrTag.value.substr(0, 1) == '@')
                otsitav = 'a|' + inpCurrTag.value.substr(1) + '|';
            else
                otsitav = 'e|' + inpCurrTag.value + '|';
            if (otsitav != lastSrchForName) {
                srchForDests = treeXmlDom.documentElement.selectNodes(".//item[starts-with(userdata, '" + otsitav + "')]");
                if (srchForDests.length == 0) {
                    spnSrchInfo.innerText = '-: 0/0';
                    lastSrchForName = '-';
                    return;
                }
                lastSrchForName = otsitav;
                srchForIndex = 0;
                //                var selectId = tree.getSelectedItemId();
                //                if (selectId == '')
                //                    srchForIndex = 0;
                //                else {
                //                    for (var ix = 0; ix < srchForDests.length; ix++) {
                //                        var treeXmlNode = srchForDests[ix];
                //                        if (treeXmlNode.getAttribute("id") == selectId) {
                //                            srchForIndex = ix;
                //                            break;
                //                        }
                //                    }
                //                }
            }
            else {
            }

            if (srchForIndex == 0)
                srchForIndex = srchForDests.length - 1;
            else
                srchForIndex--;

            var dest = srchForDests[srchForIndex];
            var destId = dest.getAttribute("id");
            tree.focusItem(destId);
            tree.selectItem(destId, true, false); // id, onSelect func, preserve (eelmine selected)

            spnSrchInfo.innerText = inpCurrTag.value + ': ' + (srchForIndex + 1) + '/' + srchForDests.length;

            return;
        } // getPrevTag


        //'-----------------------------------------------------------------------------------
        function getNextTag() { // allapoole
            if (inpCurrTag.value.length < 1) {
                spnSrchInfo.innerText = '-: 0/0';
                return;
            }
            var otsitav;
            if (inpCurrTag.value.substr(0, 1) == '@')
                otsitav = 'a|' + inpCurrTag.value.substr(1) + '|';
            else
                otsitav = 'e|' + inpCurrTag.value + '|';
            if (otsitav != lastSrchForName) {
                srchForDests = treeXmlDom.documentElement.selectNodes(".//item[starts-with(userdata, '" + otsitav + "')]");
                if (srchForDests.length == 0) {
                    spnSrchInfo.innerText = '-: 0/0';
                    lastSrchForName = '-';
                    return;
                }
                lastSrchForName = otsitav;
                //                var selectId = tree.getSelectedItemId();
                srchForIndex = 0;
            }
            //            else {
            //                for (var ix = 0; ix < srchForDests.length; ix++) {
            //                    var treeXmlNode = srchForDests[ix];
            //                    if (treeXmlNode.getAttribute("id") == selectId) {
            //                        srchForIndex = ix;
            //                        break;
            //                    }
            //                }
            //            }

            if (srchForIndex == srchForDests.length - 1)
                srchForIndex = 0;
            else
                srchForIndex++;

            var dest = srchForDests[srchForIndex];
            var destId = dest.getAttribute("id");
            tree.focusItem(destId);
            tree.selectItem(destId, true, false); // id, onSelect func, preserve (eelmine selected)

            spnSrchInfo.innerText = inpCurrTag.value + ': ' + (srchForIndex + 1) + '/' + srchForDests.length;

            return;
        } // getNextTag


        //'-----------------------------------------------------------------------------------
        var lastUndoRedo = 0;
        function salvestaSeis() {
            var rp = new restorePoint();
            restorePoints.unshift(rp);

            if (restorePoints.length > 10)
                restorePoints.pop();

            redoPoints.length = 0;
            lastUndoRedo = 0;

            lastSrchForName = '-'; // äkki lisati uusi elemente ...
            spnBufferInfo.innerText = restorePoints.length + '/' + redoPoints.length;

            sekeldaXsl2Konf();

            return;
        } // salvestaSeis


        //'-----------------------------------------------------------------------------------
        function restorePoint() {

            updateTreeXmlDom();

            this.treeXml = treeXmlDom.xml;

            var i;

            // nn jscript assotsiatiivset massiivi pole olemas, on tglkt obj
            var objCopy = new Array();
            for (i in elemendid)
                objCopy[i] = elemendid[i];
            this.elems = objCopy;

            objCopy = new Array();
            for (i in atribuudid)
                objCopy[i] = atribuudid[i];
            this.attrs = objCopy;

            return this;
        } // restorePoint


        //'-----------------------------------------------------------------------------------
        function undoOnClick() {
            if (lastUndoRedo != 1) {
                if (restorePoints.length < 2)
                    return;
                redoPoints.unshift(restorePoints.shift());
            }
            else {
                if (restorePoints.length < 1)
                    return;
            }

            displayedElem = null;

            tree.deleteItem(1, false);

            var undoRp = restorePoints.shift();
            elemendid = undoRp.elems;
            atribuudid = undoRp.attrs;
            treeXmlDom = IDD("String", undoRp.treeXml, false, false, null);
            tree.loadXMLString(undoRp.treeXml, lisaStiilid); // loading from an XML string
            tree.openAllItems(1);
            puhastaAndmed();

            redoPoints.unshift(undoRp);
            lastUndoRedo = 1;
            spnBufferInfo.innerText = restorePoints.length + '/' + redoPoints.length;

            return;
        } // undoOnClick


        //'-----------------------------------------------------------------------------------
        function redoOnClick() {
            if (lastUndoRedo != 2) {
                if (redoPoints.length < 2)
                    return;
                restorePoints.unshift(redoPoints.shift());
            }
            else {
                if (redoPoints.length < 1)
                    return;
            }

            displayedElem = null;

            tree.deleteItem(1, false);

            var redoRp = redoPoints.shift();
            elemendid = redoRp.elems;
            atribuudid = redoRp.attrs;
            treeXmlDom = IDD("String", redoRp.treeXml, false, false, null);
            tree.loadXMLString(redoRp.treeXml, lisaStiilid); // loading from an XML string
            tree.openAllItems(1);
            puhastaAndmed();

            restorePoints.unshift(redoRp);
            lastUndoRedo = 2;
            spnBufferInfo.innerText = restorePoints.length + '/' + redoPoints.length;

            return;
        } // redoOnClick


        //'-----------------------------------------------------------------------------------
        function lisaStiilid() {
            var itms = treeXmlDom.documentElement.selectNodes(".//item");
            for (var i = 0; i < itms.length; i++) {
                var itm = itms[i];
                var id = itm.getAttribute("id");
                var udNode = itm.selectSingleNode("userdata[@name = 'tag']");
                var udItms = udNode.text.split('|');
                if (udItms[2].length > 0)
                    tree.setItemStyle(id, udItms[2]);
                var ch = itm.getAttribute("checked");
                if (ch == "0") {
                    tree.setCheck(id, false);
                } else if (ch == "3") {
                    tree.setCheck(id, false);
                    tree.disableCheckbox(id, true);
                }
            }
            return;
        } // lisaStiilid


        //'-----------------------------------------------------------------------------------
        function puhastaAndmed() {
            inpCurrTag.value = '';
            inpDescNameEt.value = '';
            inpDescNameEn.value = '';
            inpDescNameRu.value = '';
            selContentType.selectedIndex = 0;
            selDataType.selectedIndex = 0;
            inpMinOcc.value = '';
            inpMaxOcc.value = '';
            chkUsed.checked = false;
            inpElemQName.value = '';
            spnRada.innerText = '';
            return;
        } // puhastaAndmed


        //'-----------------------------------------------------------------------------------
        function chkOnClick() {
        }


        //'-----------------------------------------------------------------------------------
        function lblOnContextMenu() {
        }


        //'-----------------------------------------------------------------------------------
        function setElemLayout() {
            if (displayedElem)
                updateDisplayedElemConf();

            // nullimine
            var sisestused, sisestus, ix;
            sisestused = tblElemConf.getElementsByTagName("INPUT")
            for (ix = 0; ix < sisestused.length; ix++) {
                sisestus = sisestused[ix];
                if (sisestus.type == "text")
                    sisestus.value = "";
                else if (sisestus.type == "checkbox")
                    sisestus.checked = false;
            }
            z_sel_Font.selectOption(-1, false, true);
            z_sel_Font.setComboText("");

            z_sel_FontSize.selectOption(-1, false, true);
            z_sel_FontSize.setComboText("");

            z_sel_Color.selectOption(-1, false, true);
            z_sel_Color.setComboText("");

            z_sel_BgColor.selectOption(-1, false, true);
            z_sel_BgColor.setComboText("");


            // algväärtustamine
            var currId = tree.getSelectedItemId();
            var tagItms = tree.getUserData(currId, 'tag').split('|'); // 'a' v 'e' | qn | style
            var clickedType = tagItms[0];
            var qn = tagItms[1];
            var parentId = tree.getParentId(currId);

            var parentQnQn;

            if (parentId == 0) { // <sr>
                parentQnQn = "#document/" + qn;
            }
            else {
                var parentTagItms = tree.getUserData(parentId, 'tag').split('|'); // 'a' v 'e' | qn | style
                var parentQn = parentTagItms[1];
                if (clickedType == 'e') {
                    parentQnQn = parentQn + '/' + qn;
                }
                else {
                    var grandParentId = tree.getParentId(parentId);
                    if (grandParentId == 0) { // <sr> mingi atribuut, nt @xml:lang
                        parentQnQn = "#document/" + parentQn;
                    }
                    else {
                        var grandParentTagItms = tree.getUserData(grandParentId, 'tag').split('|'); // 'a' v 'e' | qn | style
                        var grandParentQn = grandParentTagItms[1];
                        parentQnQn = grandParentQn + '/' + parentQn;
                    }
                }
            }

            // juurikas on <elems>
            displayedElem = xsl2ConfRoot.selectSingleNode("elem[@name = '" + parentQnQn + "']");
            displayedItemId = currId;

            var itmItms, prefiks = '', confBase = displayedElem;
            if (clickedType == 'a') {
                // kirjeldused;; | type.itemType | contentType | type.name
                itmItms = atribuudid[qn].split('|');
                prefiks = "attr_";
                confBase = displayedElem.selectSingleNode("attrs/attr[@name = '" + qn + "']");
                //elemSpecific.style.visibility = "hidden";
                //                chk_AddButton.style.visibility = "hidden";
                chk_Major.style.visibility = "hidden";
                inp_Init.disabled = false;
                chk_Editable.disabled = false;

                chkUsed.style.visibility = "inherit";
                inpMinOcc.style.visibility = "hidden";
                inpMaxOcc.style.visibility = "hidden";
            }
            else {
                // kirjeldused;; | type.itemType | contentType | type.name
                itmItms = elemendid[qn].split('|');
                //elemSpecific.style.visibility = "inherit";
                //                chk_AddButton.style.visibility = "inherit";
                chk_Major.style.visibility = "inherit";
                if (itmItms[2] == 2) {
                    inp_Init.disabled = true;
                    chk_Editable.disabled = true;
                }
                else {
                    inp_Init.disabled = false;
                    chk_Editable.disabled = false;
                }

                chkUsed.style.visibility = "hidden";
                inpMinOcc.style.visibility = "inherit";
                inpMaxOcc.style.visibility = "inherit";
            }

            var confItem = confBase.selectSingleNode(prefiks + "display");
            // 1 on enabletud ja checked; 3 on disabletud ja mitte-checked; 0 on enabletud ja mitte-checked
            var checkState = tree.isItemChecked(currId);
            if (checkState != 1) {
                confItem.text = "0";
                tblElemConf.style.visibility = "hidden";
                tblElemInfo.style.visibility = "hidden";
            }
            else {
                confItem.text = "1";
                tblElemConf.style.visibility = "visible";
                tblElemInfo.style.visibility = "visible";
            }

            // 1. rida
            confItem = confBase.selectSingleNode(prefiks + "colorsFont/" + prefiks + "font-weight_bold");
            if (confItem.text == "1") {
                chk_Bold.checked = true;
            }
            confItem = confBase.selectSingleNode(prefiks + "colorsFont/" + prefiks + "font-style_italic");
            if (confItem.text == "1") {
                chk_Italic.checked = true;
            }
            confItem = confBase.selectSingleNode(prefiks + "colorsFont/" + prefiks + "text-decoration_underline");
            if (confItem.text == "1") {
                chk_Underline.checked = true;
            }
            confItem = confBase.selectSingleNode(prefiks + "colorsFont/" + prefiks + "font-variant_small-caps");
            if (confItem.text == "1") {
                chk_UCase.checked = true;
            }

            // 2. rida
            confItem = confBase.selectSingleNode(prefiks + "colorsFont/" + prefiks + "font-family");
            if (confItem.text.length > 0) {
                ix = z_sel_Font.getIndexByValue(confItem.text);
                z_sel_Font.selectOption(ix, false, true);
                z_sel_Font.setComboText(confItem.text);
            }
            confItem = confBase.selectSingleNode(prefiks + "colorsFont/" + prefiks + "font-size");
            if (confItem.text.length > 0) {
                ix = z_sel_FontSize.getIndexByValue(confItem.text);
                z_sel_FontSize.selectOption(ix, false, true);
                z_sel_FontSize.setComboText(confItem.text);
            }

            // 3. rida
            confItem = confBase.selectSingleNode(prefiks + "colorsFont/" + prefiks + "color");
            if (confItem.text.length > 0) {
                ix = z_sel_Color.getIndexByValue(confItem.text);
                z_sel_Color.selectOption(ix, false, true);
                z_sel_Color.setComboText(confItem.text);
            }
            confItem = confBase.selectSingleNode(prefiks + "colorsFont/" + prefiks + "background-color");
            if (confItem.text.length > 0) {
                ix = z_sel_BgColor.getIndexByValue(confItem.text);
                z_sel_BgColor.selectOption(ix, false, true);
                z_sel_BgColor.setComboText(confItem.text);
            }

            // 4. rida
            confItem = confBase.selectSingleNode(prefiks + "tableProps/" + prefiks + "init");
            if (confItem.text.length > 0) {
                inp_Init.value = confItem.text;
            }
            confItem = confBase.selectSingleNode(prefiks + "tableProps/" + prefiks + "editable");
            if (confItem.text == "1") {
                chk_Editable.checked = true;
            }

            // 5. rida
            confItem = confBase.selectSingleNode(prefiks + "tableProps/" + prefiks + "createButton");
            if (confItem.text == "1") {
                chk_CreateButton.checked = true;
            }
            if (clickedType == 'e') {
                //                confItem = confBase.selectSingleNode(prefiks + "tableProps/" + prefiks + "addButton");
                //                if (confItem.text == "1") {
                //                    chk_AddButton.checked = true;
                //                }
                confItem = confBase.selectSingleNode(prefiks + "tableProps/" + prefiks + "major");
                if (confItem.text == "1") {
                    chk_Major.checked = true;
                }
            }

        } // setElemLayout


        //'-----------------------------------------------------------------------------------
        function updateDisplayedElemConf() {

            var displayedTagItms = tree.getUserData(displayedItemId, 'tag').split('|'); // 'a' v 'e' | qn | style
            var displayedType = displayedTagItms[0];
            var displayedQn = displayedTagItms[1];

            if (displayedQn == 'xs:any')
                return;

            setItmData();

            var prefiks = '', confBase = displayedElem;
            if (displayedType == 'a') {
                prefiks = "attr_";
                confBase = displayedElem.selectSingleNode("attrs/attr[@name = '" + displayedQn + "']");
            }

            var sisestused, ix, sisestus, cp, confProp, confItem;
            sisestused = tblElemConf.getElementsByTagName("INPUT");
            for (ix = 0; ix < sisestused.length; ix++) {
                sisestus = sisestused[ix];
                if (sisestus.type == "text" || sisestus.type == "checkbox") {
                    cp = sisestus.getAttribute("confProp").split('/');
                    for (var ixCp = 0; ixCp < cp.length; ixCp++) {
                        cp[ixCp] = prefiks + cp[ixCp];
                    }
                    confProp = cp.join('/');
                    confItem = confBase.selectSingleNode(confProp);
                    if (confItem) { // nt atribuutide korral pole 'addButton'
                        if (sisestus.type == "text") { // ka combo input-id?
                            //appendFrag(currentConfItem, sisestus.value, true)
                            confItem.text = sisestus.value;
                        }
                        else if (sisestus.type == "checkbox") {
                            if (sisestus.checked)
                                confItem.text = "1";
                            else
                                confItem.text = "";
                        }
                    }
                }
            } // for

            //'kui on globaalne, siis kanda üle kõikidele teistele globaalsetele
            if (displayedElem.selectSingleNode("global").text == "1") {
                var qn = displayedElem.getAttribute("name");
                var parentQn = qn;
                ix = qn.indexOf("/");
                if (ix > -1) {
                    qn = qn.substr(ix + 1);
                    parentQn = parentQn.substr(0, ix);
                }

                var yhine = displayedElem.cloneNode(true);
                var crB, crBYhine, addB, addBYhine, m, mYhine;
                var yhised = xsl2ConfRoot.selectNodes("elem[substring-after(@name, '/') = '" + qn + "'][display = '1'][global = '1']");
                for (ix = 0; ix < yhised.length; ix++) {
                    var elem = yhised[ix];
                    var nimi = elem.getAttribute("name");
                    var uus = yhine.cloneNode(true);

                    // säilitada loomine, lisamine,  põhielement
                    crB = elem.selectSingleNode("tableProps/createButton");
                    crBYhine = uus.selectSingleNode("tableProps/createButton");
                    crBYhine.parentNode.replaceChild(crB.cloneNode(true), crBYhine);

                    //                    addB = elem.selectSingleNode("tableProps/addButton");
                    //                    addBYhine = uus.selectSingleNode("tableProps/addButton");
                    //                    addBYhine.parentNode.replaceChild(addB.cloneNode(true), addBYhine);

                    m = elem.selectSingleNode("tableProps/major");
                    mYhine = uus.selectSingleNode("tableProps/major");
                    mYhine.parentNode.replaceChild(m.cloneNode(true), mYhine);

                    uus.setAttribute("name", nimi);
                    xsl2ConfRoot.replaceChild(uus, elem);
                }
            }
        } // updateDisplayedElemConf


        //'-----------------------------------------------------------------------------------
        function tbOnChange() {
        } // tbOnChange


        //'-----------------------------------------------------------------------------------
        function tbOnContextMenu() {
        } // tbOnContextMenu


        //'-----------------------------------------------------------------------------------
        function showTyybid() {
            var smdArgs, retVal, tyybidLocn, tyybidUri;
            tyybidUri = "http://www.eki.ee/dict/schemas/" + dic_desc + "_tyybid";
            tyybidLocn = impSchemaLocations[tyybidUri];
            smdArgs = new Array(dic_desc, usrName, appLang, tyybidLocn);
            retVal = window.showModalDialog("gen_skeem_tyybid.htm", smdArgs, "dialogHeight:548px;dialogWidth:768px;center:yes;edge:sunken;help:no;resizable:yes;scroll:yes;status:yes;unadorned:no");
            if (retVal) {
                var tId = selDataType.options[selDataType.selectedIndex].id;
                fillTypes();
                if (tId == '')
                    selDataType.options[0].selected = true;
                else
                    selDataType.options(tId).selected = true;
                tyybidSalvestatud = true;
                window.status = "Tüüpide uuendamine OK (" + retVal + ")!";
            }
        } // showTyybid


        //'-----------------------------------------------------------------------------------
        function cancelOnClick() {
            window.close();
        } // cancelOnClick


    </script>
</head>
<body style="background-color: buttonface" onload="bodyOnLoad()" onkeyup="bodyOnKeyUp()">
    <div id="idBody" style="padding: 5mm 10mm 5mm 10mm;">
        <table id="tblGen" border="1" style="width: 90%; height: 90%;">
            <tr>
                <td>
                    <label for="inpCurrTag">
                        Otsi:
                    </label>
                    <input id="inpCurrTag" type="text" style="width: 2cm;" />
                    <span id="dummySpan1" style="width: 2mm;"></span>
                    <input id="btnPrevTag" type="button" value="    " onclick="getPrevTag()" title="Ülespoole"
                        style="background: ButtonFace url(../graphics/112_UpArrowShort_Blue_16x16_72.png) no-repeat center center;
                        background-color: Transparent;" />
                    <input id="btnNextTag" type="button" value="    " onclick="getNextTag()" title="Allapoole"
                        style="background: ButtonFace url(../graphics/112_DownArrowShort_Blue_16x16_72.png) no-repeat center center;
                        background-color: Transparent;" />
                    <span id="spnSrchInfo" style="font-size: x-small; width: 25mm;"></span>
                </td>
                <td>
                    <input id="btnUndo" type="button" value="    " onclick="undoOnClick()" title="Tühista (Undo)"
                        style="background: ButtonFace url(../graphics/Edit_UndoHS.png) no-repeat center center;
                        background-color: Transparent;" />
                    <input id="btnRedo" type="button" value="    " onclick="redoOnClick()" title="Taasta (Redo)"
                        style="background: ButtonFace url(../graphics/Edit_RedoHS.png) no-repeat center center;
                        background-color: Transparent;" />
                    <span id="spnBufferInfo" style="font-size: x-small;"></span>
                </td>
            </tr>
            <tr>
                <td id="tdSkeem" valign="top">
                    <div id="treeBox" style="height: 480px; width: 544px;">
                    </div>
                </td>
                <td id="td_Item" valign="top">
                    <table id="tblElemInfo" border="1" style="width: 100%; background-color: Ivory;">
                        <tr>
                            <td>
                                Nim ek.
                            </td>
                            <td colspan="2">
                                <input id="inpDescNameEt" type="text" style="width: 4cm;" />
                            </td>
                            <td>
                                Nim ik.
                            </td>
                            <td colspan="2">
                                <input id="inpDescNameEn" type="text" style="width: 4cm;" />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Nim vk.
                            </td>
                            <td colspan="5">
                                <input id="inpDescNameRu" type="text" style="width: 4cm;" />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Liik
                            </td>
                            <td colspan="2">
                                <select id="selContentType" onchange="contentTypeChanged()">
                                    <option id="1">ainult tekst</option>
                                    <option id="2">ainult elemendid</option>
                                    <option id="3">tekst JA elemendid</option>
                                </select>
                            </td>
                            <td>
                                Tüüp
                            </td>
                            <td colspan="2">
                                <select id="selDataType">
                                </select>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Min.
                            </td>
                            <td>
                                <input id="inpMinOcc" type="text" style="width: 1cm;" />
                            </td>
                            <td>
                                Maks.
                            </td>
                            <td>
                                <input id="inpMaxOcc" type="text" style="width: 1cm;" />
                            </td>
                            <td style="width: 25mm;">
                                <label for="chkUsed">
                                    Obl.</label>
                            </td>
                            <td>
                                <input id="chkUsed" type="checkbox" />
                            </td>
                        </tr>
                    </table>
                    <table id="tblElemConf">
                        <tr>
                            <td colspan="4">
                                <input confprop='colorsFont/font-weight_bold' id='chk_Bold' type='checkbox' onclick='chkOnClick()' />
                                <label id='lbl_chk_Bold' for='chk_Bold' style="font-weight: bold;" oncontextmenu='lblOnContextMenu()'>
                                    B</label>
                                <input confprop='colorsFont/font-style_italic' id='chk_Italic' type='checkbox' onclick='chkOnClick()' />
                                <label id='lbl_chk_Italic' for='chk_Italic' style="font-style: italic;" oncontextmenu='lblOnContextMenu()'>
                                    I</label>
                                <input confprop='colorsFont/text-decoration_underline' id='chk_Underline' type='checkbox'
                                    onclick='chkOnClick()' />
                                <label id='lbl_chk_Underline' for='chk_Underline' style="text-decoration: underline;"
                                    oncontextmenu='lblOnContextMenu()'>
                                    U</label>
                                <input confprop='colorsFont/font-variant_small-caps' id='chk_UCase' type='checkbox'
                                    onclick='chkOnClick()' />
                                <label id='lbl_chk_UCase' for='chk_UCase'>
                                    ↑a<span style="font-variant: small-caps;" oncontextmenu='lblOnContextMenu()'>a</span></label>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label confprop='colorsFont/font-family' id='lbl_sel_Font' for='sel_Font' oncontextmenu='lblOnContextMenu()'>
                                    Font</label>
                            </td>
                            <td>
                                <select id="sel_Font" style='width: 160px;'>
                                </select>
                            </td>
                            <td>
                                <label confprop='colorsFont/font-size' id='lbl_sel_FontSize' for='sel_FontSize' oncontextmenu='lblOnContextMenu()'>
                                    Suurus</label>
                            </td>
                            <td>
                                <select id='sel_FontSize' style='width: 100px;'>
                                </select>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label confprop='colorsFont/color' id='lbl_sel_Color' for='sel_Color' oncontextmenu='lblOnContextMenu()'>
                                    <a href='../help/tips.htm#Colors' target='_blank'>Värv</a></label>
                            </td>
                            <td>
                                <select id="sel_Color" opt_type="image" style='width: 100px;'>
                                </select>
                            </td>
                            <td>
                                <label confprop='colorsFont/background-color' id='lbl_sel_BgColor' for='sel_BgColor'
                                    oncontextmenu='lblOnContextMenu()'>
                                    <a href='../help/tips.htm#Colors' target='_blank'>Taust</a></label>
                            </td>
                            <td>
                                <select id="sel_BgColor" opt_type="image" style='width: 100px;'>
                                </select>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <label id='lbl_inp_Init' for='inp_Init' oncontextmenu='lblOnContextMenu()'>
                                    Algv.</label>
                                <input confprop='tableProps/init' id='inp_Init' type='text' value='' style="width: 4cm;"
                                    onchange='tbOnChange()' oncontextmenu='tbOnContextMenu()' />
                            </td>
                            <td colspan="2">
                                <input confprop='tableProps/editable' id='chk_Editable' type='checkbox' onclick='chkOnClick()' />
                                <label id='lbl_chk_Editable' for='chk_Editable' oncontextmenu='lblOnContextMenu()'>
                                    Muudetav</label>
                            </td>
                        </tr>
                        <tr id="elemSpecific">
                            <td colspan="4">
                                <input confprop='tableProps/createButton' id='chk_CreateButton' type='checkbox' onclick='chkOnClick()' />
                                <label id='lbl_chk_CreateButton' for='chk_CreateButton' oncontextmenu='lblOnContextMenu()'>
                                    Luua</label>
                                <!--                               <input confprop='tableProps/addButton' id='chk_AddButton' type='checkbox' onclick='chkOnClick()' />
                                <label id='lbl_chk_AddButton' for='chk_AddButton' oncontextmenu='lblOnContextMenu()'>
                                    Lisada</label>-->
                                <input confprop='tableProps/major' id='chk_Major' type='checkbox' onclick='chkOnClick()' />
                                <label id='lbl_chk_Major' for='chk_Major' oncontextmenu='lblOnContextMenu()'>
                                    Põhielement</label>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr>
                <td>
                    <input id="inpElemQName" type="text" disabled style="width: 2cm;" />
                    <span id="spnRada" style="font-weight: bold;"></span>
                </td>
                <td>
                    <table style="width: 100%;">
                        <tr>
                            <td>
                                <input id="btnTyybid" type="button" value="Tüübid" onclick="showTyybid()" />
                            </td>
                            <!--                         <td style="width: 3cm;">
                                <input id="btnDelConf" type="button" value="Kustuta konf." />
                            </td>-->
                            <td>
                            </td>
                            <td align="right">
                                <input id="btnSave" type="button" value="Salvesta" onclick="saveXsd()" />
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr>
                <td colspan="2" align="right">
                    <input id="btnCancel" type="button" title="Välju" value="  OK  " onclick="cancelOnClick()" />
                </td>
            </tr>
        </table>
    </div>
    <div id="cmenu" style="display: none; position: absolute; width: 300px; background-color: menu;
        border: outset 3px gray;" onmouseover="SwitchCMenu()" onmouseout="SwitchCMenu()"
        onclick="ClickCMenu()" oncontextmenu="DisableContextMenu()">
    </div>
    <div id="elemNames" style="display: none; position: absolute; width: 300px; height: 400px;
        background-color: menu; border: outset 3px gray; overflow-y: auto" onmouseover="SwitchCMenu()"
        onmouseout="SwitchCMenu()" onclick="ClickCMenu()" onlosecapture="HideDivMenu()">
    </div>
    <div id="attrNames" style="display: none; position: absolute; width: 300px; background-color: menu;
        border: outset 3px gray" onmouseover="SwitchCMenu()" onmouseout="SwitchCMenu()"
        onclick="ClickCMenu()" onlosecapture="HideDivMenu()">
    </div>
    <object id="dlgHelper" classid="clsid:3050f819-98b5-11cf-bb82-00aa00bdce0b" width="0px"
        height="0px">
    </object>
</body>
</html>
